using Bulk_Thumbnail_Creator.Interfaces;
using Bulk_Thumbnail_Creator.PictureObjects;
using Bulk_Thumbnail_Creator.Services;
using System.Collections.Generic;

namespace Bulk_Thumbnail_Creator
{
    public class Settings
    {
        public Settings(ILogService _logger, JobService JS)
        {
            LogService = _logger;
            JobService = JS;

        }

        /// <summary>
        /// Enables Mocking of the Process calls to the Creator class
        /// true = Mocking
        /// false = Production
        private static bool _Mocking = false;
        public static bool Mocking { get { return _Mocking; } set { _Mocking = value; } }

        // log service access
        private ILogService logService;
        public ILogService LogService { get => logService; set => logService = value; }

        // Job service access
        private JobService jobService;
        public JobService JobService { get => jobService; set => jobService = value; }

        /// <summary>
        /// The Dir where FFmpeg outputs raw images from the specified video
        /// </summary>
        private string _outputDir = "output";
        public string OutputDir { get { return _outputDir; } set { _outputDir = value; } }

        /// <summary>
        /// The Dir where images that have text added(compositioned) to it goes
        /// </summary>
        private string _TextAddedDir = "text added";
        public string TextAddedDir { get { return _TextAddedDir; } set { _TextAddedDir = value; } }

        // Location of YTDLP executable
        private string _YTDLPDir;
        public string YTDLPDir { get { return _YTDLPDir; } set { _YTDLPDir = value; } }

        /// <summary>
        /// The Dir where videos are downloaded
        /// </summary>
        private string _YTDLOutPutDir = "YTDL";
        public string YTDLOutPutDir { get { return _YTDLOutPutDir; } set { _YTDLOutPutDir = value; } }

        /// <summary>
        /// Directory where FFmpeg exe is located
        /// </summary>
        private string _FfmpegDir;
        public string FfmpegDir { get { return _FfmpegDir; } set { _FfmpegDir = value; } }

        /// <summary>
        /// String Array of the Filenames generated by ffmpeg
        /// </summary>
        private string[] files;
        public string[] Files { get { return files; } set { files = value; } }

        /// <summary>
        /// Where the available memes are stashed
        /// </summary>
        private static string _DankMemeStashDir = "DankMemeStash";
        public static string DankMemeStashDir { get { return _DankMemeStashDir; } set { _DankMemeStashDir = value; } }

        /// <summary>
        /// A string array of the available memes from the DankMemeStash
        /// </summary>
        private static string[] _Memes;
        public static string[] Memes { get { return _Memes; } set { _Memes = value; } }

        /// <summary>
        /// List of PictureDataObject which is a complete recipe to output an 
        /// image(or output an image again after the fact)
        /// </summary>
        private List<PictureData> _PictureDatas = new();
        public List<PictureData> PictureDatas { get { return _PictureDatas; } set { _PictureDatas = value; } }

        /// <summary>
        /// Exists only to limit randomization to a 255 correct RGB end value
        /// </summary>
        private const int _MaxRGB = 256;
        public static int MaxRGB { get { return _MaxRGB; } }

        /// <summary>
        /// Where your output Text strings are located
        /// </summary>
        private List<string> _ListOfText = new();
        public List<string> ListOfText { get { return _ListOfText; } set { _ListOfText = value; } }


        /// <summary>
        /// path to the video to take thumbnails from
        /// </summary>
        private string _PathToVideo;
        public string PathToVideo { get { return _PathToVideo; } set { _PathToVideo = value; } }

        /// <summary>
        /// A list of the Videos that have previously been downloaded
        /// </summary>
        private static List<string> _DownloadedVideosList = new();
        public static List<string> DownloadedVideosList { get { return _DownloadedVideosList; } set { _DownloadedVideosList = value; } }

        /// <summary>
        /// Your XML of downloadedvideos
        /// </summary>
        private static readonly string _PathToXMLListOfDownloadedVideos = "ListOfDownloadedVideos.xml";
        public static string PathToXMLListOfDownloadedVideos { get { return _PathToXMLListOfDownloadedVideos; } }
    }

}