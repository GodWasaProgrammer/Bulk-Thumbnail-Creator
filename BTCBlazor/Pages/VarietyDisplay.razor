@using Bulk_Thumbnail_Creator.Services;
@using Bulk_Thumbnail_Creator.PictureObjects;
@using Services.Interfaces;

@inject PicDataService PicDataService;
@inject ILogService logger;

@page "/varietydisplay"

<div class="image-container">
    @for (int i = 0; i < imageURL.Count; i++)
    {
        var imageUrl = imageURL[i]; // Capture the value
        <img class="image-button" src="@imageUrl" @onclick="(() => NavToCustomizePicture(imageUrl))" />
        @if ((i + 1) % 3 == 0)
        {
            <div style="flex-basis: 100%; height: 0;"></div>
        }
    }
</div>

@code 
{
    public List<string> imageUrls;

    public VarietyDisplay()
    {
        imageUrls = new List<string>();
    }

    [Parameter]
    public PictureData ParentPictureProp { get; set; }


    [Inject]
    private NavigationManager NavigationManager { get; set; }

    private void NavToCustomizePicture(string imageURL)
    {
            NavigationManager.NavigateTo($"/CustomizePicture/{Uri.EscapeDataString(imageURL)}");
    }

    private List<string> imageURL = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        await CreateVarietyAsync();
        LoadImageUrls();
    }

    private async Task CreateVarietyAsync()
    {
        imageUrls = await PicDataService.CreatePictureDataVariety(ParentPictureProp, logger);
    }

    private void LoadImageUrls()
    {
        string parentfilename = Path.GetFileName(ParentPictureProp.FileName);
        string varietyof = "variety of";
        string ConcatenatedString =$"{Bulk_Thumbnail_Creator.Settings.TextAddedDir}/{varietyof} {parentfilename}";
        string[] ArrayOfFilePaths = Directory.GetFiles(ConcatenatedString, "*.png");

        foreach (string filepath in ArrayOfFilePaths)
        {
            string imageurl = $"/{filepath}"; // convert to URL
            imageURL.Add(imageurl);
        }

     }

}

<style>
    /* Style the image container */
    .image-container2 {
        display: flex;
        flex-wrap: wrap;
        height: 100%;
        justify-content: center;
    }

    image-container img {
        max-width: calc(50% - 50px); /* Set the width for each image in the row */
        margin: 10px;
    }
</style>

<style>
    .image-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

        .image-container img {
            max-width: calc(30% - 50px); /* Set the width for each image in the row */
            margin: 10px;
        }
</style>