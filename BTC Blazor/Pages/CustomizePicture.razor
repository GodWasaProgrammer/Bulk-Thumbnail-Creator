@page "/CustomizePicture/{imageUrl}"

@using Bulk_Thumbnail_Creator;
@using Bulk_Thumbnail_Creator.Interfaces;
@using Bulk_Thumbnail_Creator.PictureObjects;
@using MudBlazor.Utilities;
@using UMapx;

@inject Bulk_Thumbnail_Creator.PictureObjects.PictureDataService PicDataService
@inject NavigationManager navmanager;
@inject ILogService Logger;

<h1>Bulk Thumbnail Creator</h1>

<div class="grid-container">

    <PictureDataBox ImageURL="@ImageURL" PicData="@CurrentPagePictureData"></PictureDataBox>

    <div class="color-box-container">

        <MudColorPicker PickerVariant="PickerVariant.Dialog" ColorPickerMode="ColorPickerMode.HSL" DisableAlpha DisableModeSwitch @bind-Value="colorvalue"></MudColorPicker>

         <MudSelect AdornmentColor="Color.Primary" Label="Select a Color to edit" @bind-Value="PickedGroup">

             @foreach (var Colorz in colorBoxes)
            {

                <MudSelectItem Value="@Colorz"><MudText Color="Color.Secondary">@Colorz</MudText></MudSelectItem>
            }

        </MudSelect>
        <MudButton Color="Color.Primary" @onclick="() => SetColor(PickedGroup)">Set Color</MudButton>

        <MudSelect AdornmentColor="Color.Primary" Label="Select an output box" @bind-Value="PickedBox">

            @foreach (var key in CurrentPagePictureData.ParamForTextCreation.Boxes.Keys)
            {
                var value = CurrentPagePictureData.ParamForTextCreation.Boxes[key];
                <MudSelectItem Value="@key"><MudText Color="Color.Secondary">@key</MudText></MudSelectItem>
            }

        </MudSelect>

        <MudSelect AdornmentColor="Color.Primary" Label="Select a font" @bind-Value="PickedFont">

            @foreach (var font in AvailableFonts)
            {

                <MudSelectItem Value="@font"><MudText Color="Color.Secondary">@font</MudText></MudSelectItem>
            }

        </MudSelect>

        <div class="fact-box">
            <div class="fact-group">
                <div class="fact-title">Picture Data To Produce</div>
                <div class="fact-item">Chosen Font: @Path.GetFileName(PickedFont)</div>
                <div class="fact-item">Chosen Box: @PickedBox.ToString()</div>
            </div>

            <div class="fact-group">
                <div class="fact-title">BorderColor Values</div>
                <div class="fact-item">Hue: @BorderCLRItem.Hue</div>
                <div class="fact-item">Saturation: @BorderCLRItem.Saturation</div>
                <div class="fact-item">Luminance: @BorderCLRItem.Luminance</div>
            </div>

            <div class="fact-group">
                <div class="fact-title">FillColor Values</div>
                <div class="fact-item">Hue: @fillCLRItem.Hue</div>
                <div class="fact-item">Saturation: @fillCLRItem.Saturation</div>
                <div class="fact-item">Luminance: @fillCLRItem.Luminance</div>
            </div>

            <div class="fact-group">
                <div class="fact-title">StrokeColor Values</div>
                <div class="fact-item">Hue: @StrokeCLRItem.Hue</div>
                <div class="fact-item">Saturation: @StrokeCLRItem.Saturation</div>
                <div class="fact-item">Luminance: @StrokeCLRItem.Luminance</div>
            </div>

            <div class="fact-button">
                <button class="custom-button" disabled="@_processing" @onclick="CreateCustomPicDataObject">
                    @if (_processing)
                    {
                        <div class="loader"></div>
                        <div class="button-text">Processing</div>
                    }
                    else
                    {
                        <text>Produce Picture</text>
                    }
                </button>
            </div>
        </div>


    </div>

</div>
