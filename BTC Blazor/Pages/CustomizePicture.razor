@page "/CustomizePicture/{imageUrl}"

@using Bulk_Thumbnail_Creator;
@using Bulk_Thumbnail_Creator.PictureObjects;
@using MudBlazor.Utilities;
@using UMapx;

@inject Bulk_Thumbnail_Creator.PictureObjects.PictureDataService PicDataService

<h1>Bulk Thumbnail Creator</h1>

<div class="grid-container">
    <div class="picture-data-box">
        <h3 class="studded-header">Picture Data</h3>
        <img src="@ImageURL" style="max-width: 100%;" />

        <div class="fact-box">
            <div class="fact-group">
                <div class="fact-title">Picture Data names</div>
                <div class="fact-item">Current font name: @Path.GetFileName(ParamForTextCreation.Font)</div>
                <div class="fact-item">Base Filename: @FileName</div>
                <div class="fact-item">Production Filename:@Path.GetFileName(OutPath) </div>
            </div>
            <div class="fact-group">
                <div class="fact-title">Picture Data values</div>
                <div class="fact-item">Output Type:@OutPutType</div>
                <div class="fact-item">Current Text Box:@ParamForTextCreation.CurrentBox</div>
                <div class="fact-item">Text To be Printed:@ParamForTextCreation.Text</div>
                <div class="fact-item">Width of text box:@ParamForTextCreation.WidthOfBox</div>
                <div class="fact-item">Position Of text: @ParamForTextCreation.PositionOfText</div>
            </div>
        </div>
    </div>

    <div class="color-box-container">

        <MudColorPicker PickerVariant="PickerVariant.Dialog" ColorPickerMode="ColorPickerMode.HSL" DisableAlpha DisableModeSwitch @bind-Value="colorvalue"></MudColorPicker>

         <MudSelect AdornmentColor="Color.Primary" Label="Select a Color to edit" @bind-Value="PickedGroup">

             @foreach (var Colorz in colorBoxes)
            {

                <MudSelectItem Value="@Colorz"><MudText Color="Color.Secondary">@Colorz</MudText></MudSelectItem>
            }

        </MudSelect>
        <MudButton Color="Color.Primary" @onclick="() => SetColor(PickedGroup)">Set Color</MudButton>

        <MudSelect AdornmentColor="Color.Primary" Label="Select an output box" @bind-Value="PickedBox">

            @foreach (var key in CurrentPagePictureData.ParamForTextCreation.Boxes.Keys)
            {
                var value = CurrentPagePictureData.ParamForTextCreation.Boxes[key];
                <MudSelectItem Value="@key"><MudText Color="Color.Secondary">@key</MudText></MudSelectItem>
            }

        </MudSelect>

        <MudSelect AdornmentColor="Color.Primary" Label="Select a font" @bind-Value="PickedFont">

            @foreach (var font in AvailableFonts)
            {

                <MudSelectItem Value="@font"><MudText Color="Color.Secondary">@font</MudText></MudSelectItem>
            }

        </MudSelect>

        <div class="fact-box">
            <div class="fact-group">
                <div class="fact-title">Picture Data To Produce</div>
                <div class="fact-item">Chosen Font: @Path.GetFileName(PickedFont)</div>
                <div class="fact-item">Chosen Box: @PickedBox.ToString()</div>
            </div>

            <div class="fact-group">
                <div class="fact-title">BorderColor Values</div>
                <div class="fact-item">Hue: @BorderCLRItem.Hue</div>
                <div class="fact-item">Saturation: @BorderCLRItem.Saturation</div>
                <div class="fact-item">Luminance: @BorderCLRItem.Luminance</div>
            </div>

            <div class="fact-group">
                <div class="fact-title">FillColor Values</div>
                <div class="fact-item">Hue: @fillCLRItem.Hue</div>
                <div class="fact-item">Saturation: @fillCLRItem.Saturation</div>
                <div class="fact-item">Luminance: @fillCLRItem.Luminance</div>
            </div>

            <div class="fact-group">
                <div class="fact-title">StrokeColor Values</div>
                <div class="fact-item">Hue: @StrokeCLRItem.Hue</div>
                <div class="fact-item">Saturation: @StrokeCLRItem.Saturation</div>
                <div class="fact-item">Luminance: @StrokeCLRItem.Luminance</div>
            </div>

            <div class="fact-button">
                <button class="custom-button" disabled="@_processing" @onclick="CreateCustomPicDataObject">
                    @if (_processing)
                    {
                        <div class="loader"></div>
                        <div class="button-text">Processing</div>
                    }
                    else
                    {
                        <text>Produce Picture</text>
                    }
                </button>
            </div>
        </div>


    </div>

</div>

@code
{
    private bool _processing = false;

    private List<ColorGroup> colorBoxes = Enum.GetValues(typeof(ColorGroup)).Cast<ColorGroup>().ToList();

    private MudColor colorvalue;

    private ColorGroup PickedGroup;

    // get value from picker
    private MudColor BorderColor;
    // set value and display it
    private ColorItem BorderCLRItem;

    // get value from picker
    private MudColor FillColor;
    // set value and display it
    private ColorItem fillCLRItem;

    // get value from picker
    private MudColor StrokeColor;
    // set value and display it
    private ColorItem StrokeCLRItem;

    private enum ColorProperty
    {
        Hue,
        Saturation,
        Luminance
    }

    private enum ColorGroup
    {
        FillColor,
        BorderColor,
        StrokeColor
    }

    private void initializeColorItems()
    {
        BorderCLRItem = CurrentPagePictureData.ParamForTextCreation.BorderColor;
        fillCLRItem = CurrentPagePictureData.ParamForTextCreation.FillColor;
        StrokeCLRItem = CurrentPagePictureData.ParamForTextCreation.StrokeColor;
    }

    private void SetColor(ColorGroup clrGRP)
    {
        if (clrGRP == ColorGroup.BorderColor)
        {
            BorderColor = colorvalue;
            BorderCLRItem.SetByHSL((float)BorderColor.H, (float)BorderColor.S, (float)BorderColor.L);
        }
        if (clrGRP == ColorGroup.FillColor)
        {
            FillColor = colorvalue;
            fillCLRItem.SetByHSL((float)FillColor.H, (float)FillColor.S, (float)FillColor.L);
        }
        if (clrGRP == ColorGroup.StrokeColor)
        {
            StrokeColor = colorvalue;
            StrokeCLRItem.SetByHSL((float)StrokeColor.H, (float)StrokeColor.S, (float)StrokeColor.L);
        }
        StateHasChanged();
    }

}