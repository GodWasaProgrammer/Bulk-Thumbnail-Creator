@inject Bulk_Thumbnail_Creator.Services.PictureDataService ds;

<Loading _processing="@Loading"></Loading>

@if (DisableMenu == false)
{
    @if (DownloadedVideosList != null)
    {
        <select>

            @foreach (string listobject in DownloadedVideosList)
            {
                <option value="@listobject">@listobject</option>
            }
        </select>

    }

    <div class="input-container">

        <div class="youtube-link">

            <label class="input-label" for="textInput">Youtube Link:</label>

            <input id="textInput" type="text" @bind="textInput" class="matrix-input" />

        </div>

        <div class="text-to-print">

            <div>

                <label class="input-label" for="textToPrint1">Text To Print 1:</label>

                <input id="textToPrint1" type="text" @bind="@TextToPrint1" class="matrix-input" />

            </div>

            <div>

                <label class="input-label" for="textToPrint2">Text To Print 2:</label>

                <input id="textToPrint2" type="text" @bind="@TextToPrint2" class="matrix-input" />

            </div>

            <div>

                <label class="input-label" for="textToPrint3">Text To Print 3:</label>

                <input id="textToPrint3" type="text" @bind="@TextToPrint3" class="matrix-input" />

            </div>

        </div>

    </div>

      <MudButton OnClick="AwaitBTC" Variant="Variant.Filled" Color="Color.Primary"> <MudText>Run BTC</MudText></MudButton>

    @if (passedNull)
    {
        <MudText>You need to give me an actual YoutubeLink</MudText>
    }


}

@code
{
    public List<string> DownloadedVideosList { get; set; }

    private string TextToPrint1 = "Good Ole Rambler try!";
    private string TextToPrint2 = "I've Taken Dunkirk! Onwards Men!";
    private string TextToPrint3 = "Tallyhoo Laddiooo";

    private async Task CallBTC(string url)
    {
        List<string> ListOfTextToPrint = new() { TextToPrint1, TextToPrint2, TextToPrint3 };

        await ds.CreateInitialPictureArrayAsync(url, ListOfTextToPrint);

    }

    private bool DisableMenu;
    private string textInput = string.Empty;
    private bool passedNull = false;
    private bool Loading;

    [Parameter]
    public Action<bool> returnStateUpdate { get; set; }

    private async void AwaitBTC()
    {
        string url = textInput;

        if (url == null || url == string.Empty)
        {
            passedNull = true;
        }
        else
        {
            passedNull = false;
            Loading = true;
            DisableMenu = true;
            await CallBTC(url);
            returnStateUpdate(DisableMenu);
            Loading = false;
            StateHasChanged();
        }

    }

}