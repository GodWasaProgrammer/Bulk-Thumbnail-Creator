@page "/imagedisplay"

@inject NavigationManager navmanager;
@using Bulk_Thumbnail_Creator;

@if (IMGDetailClicked == false)
{
    @if (imageUrls != null)
    {
        @foreach (var imageUrl in imageUrls)
        {
            <button class="image-button" @onclick="() => ShowImageDetail(imageUrl)">
                <img src="@imageUrl" style="max-width: 300px; margin: 10px;" />
            </button>
        }

    }

}
else
{
    <Loading _processing="true"></Loading>
}

@code
{
    private List<string> imageUrls;

    [Inject]
    private NavigationManager navman { get; set; }

    // Load image URLs in the OnInitializedAsync lifecycle method
    protected override async Task OnInitializedAsync()
    {
        await UpdateImageUrls();
    }

    /// <summary>
    /// Builds Directory List of the produced images
    /// </summary>
    /// <returns></returns>
    public async Task UpdateImageUrls()
    {
        string imagePath = Settings.TextAddedDir;

        // Get the list of image files in the folder asynchronously
        string[] imageFiles = await Task.Run(() => Directory.GetFiles(imagePath, "*.png"));

        // Initialize the image URLs list
        imageUrls = new List<string>();

        // Create the URLs for the images and add them to the list
        foreach (string imageFile in imageFiles)
        {
            string imageUrl = $"/{imageFile}";
            imageUrls.Add(imageUrl);
        }

        // Notify the component that the state has changed
        StateHasChanged();
    }


    private bool IMGDetailClicked = false;
    private void ShowImageDetail(string imageUrl)
    {
        IMGDetailClicked = true;

        navman.NavigateTo($"/imagedetail/{Uri.EscapeDataString(imageUrl)}");
    }
}
<style>
    .image-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

        .image-container img {
            max-width: calc(30% - 50px); /* Set the width for each image in the row */
            margin: 10px;
        }
</style>