@page "/picdatalist"
@using BulkThumbnailCreator.PictureObjects
@using BulkThumbnailCreator.Services
@using System.Net.Http.Json
@using System.Net.Http
@using BulkThumbnailCreator
@inject PicDataService PicDataService
@inject JobService js;
@inject Settings settings;
@inject AuthenticationStateProvider AuthProvider;

<MudDataGrid Items="@PicDataList">
    <Columns>
        <PropertyColumn Property="x => x.OutPutType" Title="Type" />
        <PropertyColumn Property=@( x => Path.GetFileNameWithoutExtension(x.FileName)) />
        <PropertyColumn Property="x => x.Varieties.Count" Title="Varieties">
            <CellTemplate>

                <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">View</MudButton>
            </CellTemplate>
        </PropertyColumn>

    </Columns>
</MudDataGrid>

@code
{
    public void ViewVarieties()
    {

    }

    public Job currentJob;
    public string currentUser;


    IEnumerable<PictureData> PicDataList = new List<PictureData>();

    DataGridFilterMode _filterMode = DataGridFilterMode.Simple;
    DataGridFilterCaseSensitivity _caseSensitivity = DataGridFilterCaseSensitivity.Default;

    protected override async Task OnInitializedAsync()
    {
        var AuthState = await AuthProvider.GetAuthenticationStateAsync();

        currentUser = AuthState.User.Identity.Name;

        if (currentJob == null)
        {
            currentJob = await js.RequestCurrentJob(currentUser);
        }
        await InvokeAsync(() => StateHasChanged());

        if (currentJob is not null)
        {
            PicDataList = currentJob.PictureDatas;
        }
    }
}