@page "/Generator"
@using WebUI.Components
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Hosting
@using Microsoft.JSInterop
@using BulkThumbnailCreator
@using Microsoft.AspNetCore.Identity
@using BulkThumbnailCreator.Services
@using BulkThumbnailCreator.DataMethods
@inject CreatorService ds;
@inject JobService js;
@inject Settings settings;
@inject AuthenticationStateProvider AuthProvider;

<CascadingAuthenticationState>

    <AuthorizeView>

        <Authorized>

            <div style="padding-top: 20px;">
                <InputMenu job="CurrentJob" returnStateUpdate="BuildImageDisplay"></InputMenu>
            </div>

            <ImageDisplay CurrentJob="CurrentJob" @ref="imageDisplayref"></ImageDisplay>

            <div>
                @if (Loading)
                {
                    <IntermediateLoading />
                }
            </div>

        </Authorized>

    </AuthorizeView>

</CascadingAuthenticationState>

@code
{
    private bool Loading { get; set; }

    public void OnGet()
    {
        string wwwrootPath = Path.Combine("wwwroot", "images");
        string logoFilePath = Path.Combine(wwwrootPath, "BTCLogo.png");

        // Generate the logo and save it to the specified location
        LogoGeneration.GenerateLogo(logoFilePath);
    }

    private void HandleLoadingStateChanged(object sender, bool isLoading)
    {
        Loading = isLoading;
        InvokeAsync(() => StateHasChanged());
    }

    public void reset()
    {
        CurrentJob = js.Reset();
    }

    public Job CurrentJob;

    ImageDisplay imageDisplayref;

    private string CurrentUser;

    protected override async Task OnInitializedAsync()
    {
        var AuthState = await AuthProvider.GetAuthenticationStateAsync();

        OnGet();

        CurrentUser = AuthState.User.Identity.Name;

        js.RegisterResetMethod(reset);
        ds.LoadingStateChanged += HandleLoadingStateChanged;

        if (CurrentJob == null)
        {
            CurrentJob = await js.RequestCurrentJob(CurrentUser);
        }
        await InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Passed to InputMenu as delegate to be able to set the state of child component ImageDisplay
    /// </summary>
    /// <param name="dirdone"></param>
    private async void BuildImageDisplay(bool dirdone)
    {
        if (dirdone)
        {
            await imageDisplayref.UpdateImageUrls(settings);
        }
    }
}