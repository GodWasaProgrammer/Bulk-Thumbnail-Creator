@page "/Generator"
@using WebUI.Components
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Hosting
@using Microsoft.JSInterop
@using BulkThumbnailCreator
@using Microsoft.AspNetCore.Identity
@using BulkThumbnailCreator.Services
@using BulkThumbnailCreator.DataMethods
@using BulkThumbnailCreator.Enums
@inject CreatorService ds;
@inject JobService js;
@inject Settings settings;
@inject AuthenticationStateProvider AuthProvider;

<CascadingAuthenticationState>

    <AuthorizeView>

        <Authorized>

            <div style="padding-top: 20px;">
                <InputMenu job="CurrentJob" returnStateUpdate="BuildImageDisplay"></InputMenu>
            </div>

            <ImageDisplay CurrentJob="CurrentJob" @ref="imageDisplayref"></ImageDisplay>

            <div>
                @if (Loading)
                {
                    <IntermediateLoading />
                }
            </div>

        </Authorized>

    </AuthorizeView>

</CascadingAuthenticationState>

@code
{
    private bool Loading { get; set; }

    private void HandleLoadingStateChanged(object sender, bool isLoading)
    {
        Loading = isLoading;
        InvokeAsync(() => StateHasChanged());
    }

    public async void OnStateChangedHandler(object sender, EventArgs e)
    {
        if (CurrentJob.State != States.Loading)
        {
            Loading = false;

            if (CurrentJob.State is States.FrontPagePictureLineUp)
            {
                await imageDisplayref.UpdateImageUrls(CurrentJob.Settings);
            }
        }
        await InvokeAsync(() => StateHasChanged());
    }

    public void reset()
    {
        CurrentJob = js.Reset();
    }

    public Job CurrentJob { get; set; }

    ImageDisplay imageDisplayref;

    private string CurrentUser;

    private async void FetchChangedJob()
    {
        if (CurrentJob is null)
        {
            CurrentJob = await js.RequestCurrentJob(CurrentUser);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var AuthState = await AuthProvider.GetAuthenticationStateAsync();
        CurrentUser = AuthState.User.Identity.Name;

        js.RegisterDelegateForJobChange(FetchChangedJob);

        js.RegisterResetMethod(reset);
        ds.LoadingStateChanged += HandleLoadingStateChanged;

        // we check if there is a job
        if (CurrentJob is null)
        {
            CurrentJob = await js.RequestCurrentJob(CurrentUser);
            if (CurrentJob is not null)
            {
                if (CurrentJob.State is States.Loading)
                {
                    Loading = true;
                }
                CurrentJob.StateChanged += OnStateChangedHandler;
            }
        }
        await InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Passed to InputMenu as delegate to be able to set the state of child component ImageDisplay
    /// </summary>
    /// <param name="dirdone"></param>
    private async void BuildImageDisplay(bool dirdone)
    {
        if (dirdone)
        {
            await imageDisplayref.UpdateImageUrls(settings);
        }
    }
}