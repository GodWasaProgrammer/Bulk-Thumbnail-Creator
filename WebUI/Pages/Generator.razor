@page "/Generator"
@using WebUI.Components
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Hosting
@using Microsoft.JSInterop
@using BulkThumbnailCreator
@using Microsoft.AspNetCore.Identity
@using BulkThumbnailCreator.Services
@using BulkThumbnailCreator.DataMethods
@using BulkThumbnailCreator.Enums
@inject CreatorService ds;
@inject JobService js;
@inject Settings settings;
@inject AuthenticationStateProvider AuthProvider;


<div style="padding-top: 20px;">
    <InputMenu job="CurrentJob" User="@CurrentUser"></InputMenu>
</div>

<ImageDisplay CurrentUser="@CurrentUser" CurrentJob="CurrentJob"></ImageDisplay>

<div>
    @if (Loading)
    {
        <IntermediateLoading CurrentUser="@CurrentUser" />
    }
</div>


@code
{
    private bool Loading { get; set; }

    private void HandleLoadingStateChanged(object sender, bool isLoading)
    {
        Loading = isLoading;
        InvokeAsync(() => StateHasChanged());
    }

    public async void OnStateChangedHandler(object sender, EventArgs e)
    {
        if (CurrentJob.State != States.Loading)
        {
            Loading = false;
        }

        await InvokeAsync(() => StateHasChanged());
    }

    public void reset()
    {
        CurrentJob = null;
    }

    public Job CurrentJob { get; set; }

    private string CurrentUser;

    private async void FetchChangedJob()
    {
        if (CurrentJob is null)
        {
            CurrentJob = await js.RequestCurrentJob(CurrentUser);
        }

        var fetchjob = await js.RequestCurrentJob(CurrentUser);

        if (CurrentJob != fetchjob)
        {
            CurrentJob = fetchjob;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var AuthState = await AuthProvider.GetAuthenticationStateAsync();
        CurrentUser = AuthState.User.Identity.Name;

        if (CurrentUser is null)
        {
            var anonUser = Guid.NewGuid();
            CurrentUser = anonUser.ToString();
        }

        js.RegisterDelegateForJobChange(FetchChangedJob);

        js.RegisterResetMethod(reset);
        ds.LoadingStateChanged += HandleLoadingStateChanged;

        // we check if there is a job
        if (CurrentJob is null)
        {
            CurrentJob = await js.RequestCurrentJob(CurrentUser);
            if (CurrentJob is not null)
            {
                if (CurrentJob.State is States.Loading)
                {
                    Loading = true;
                }
                CurrentJob.StateChanged += OnStateChangedHandler;
            }
        }
        await InvokeAsync(() => StateHasChanged());
    }
}