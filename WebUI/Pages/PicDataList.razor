@page "/picdatalist"
@using BulkThumbnailCreator.PictureClasses
@using BulkThumbnailCreator.Services
@using System.Net.Http.Json
@using System.Net.Http
@using BulkThumbnailCreator
@using WebUI.Components
@inject PicDataService PicDataService
@inject JobService js;
@inject Settings settings;
@inject AuthenticationStateProvider AuthProvider;
@if (view is false)
{
    <MudDataGrid Items="@ListOfPicData">
        <Columns>
            <PropertyColumn Property="x => x.OutPutType" Title="Type" />
            <PropertyColumn Property=@( x => Path.GetFileNameWithoutExtension(x.FileName)) />
            <PropertyColumn Property="x => x.Varieties">
                <CellTemplate>
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="() => ViewVarieties(context.Item)">View</MudButton>
                </CellTemplate>
            </PropertyColumn>
        </Columns>
    </MudDataGrid>
}

<VarietyList indexOfPicData="passIndex" />

@code
{
    private int passIndex;
    private bool view = false;
    public void ViewVarieties(PictureData p)
    {
        passIndex = currentJob.PictureDatas.IndexOf(p);
        if (view)
        { view = false; }
        else
        { view = true; }
        StateHasChanged();
    }

    public Job currentJob;
    public string currentUser;

    IEnumerable<PictureData> ListOfPicData = new List<PictureData>();

    DataGridFilterMode _filterMode = DataGridFilterMode.Simple;
    DataGridFilterCaseSensitivity _caseSensitivity = DataGridFilterCaseSensitivity.Default;

    protected override async Task OnInitializedAsync()
    {
        var AuthState = await AuthProvider.GetAuthenticationStateAsync();

        currentUser = AuthState.User.Identity.Name;

        if (currentJob == null)
        {
            currentJob = await js.RequestCurrentJob(currentUser);
        }
        await InvokeAsync(() => StateHasChanged());

        if (currentJob is not null)
        {
            ListOfPicData = currentJob.PictureDatas;
        }
    }
}