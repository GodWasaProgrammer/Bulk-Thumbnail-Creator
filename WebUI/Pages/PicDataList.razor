@page "/picdatalist"
@using BulkThumbnailCreator.PictureClasses
@using BulkThumbnailCreator.Services
@using System.Net.Http.Json
@using System.Net.Http
@using BulkThumbnailCreator
@using WebUI.Components
@inject JobService js
@inject Settings settings
@inject AuthenticationStateProvider AuthProvider

@if (view is false)
{
    <MudDataGrid Items="@ListOfPicData">
        <Columns>
            <PropertyColumn Property="x => x.FileName" Title="Picture">
                <CellTemplate>
                    <MudImage Width="100" Src="@MatchUrl(context.Item.FileName)"></MudImage>
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.OutPutType" Title="Type" />
            <PropertyColumn Property=@( x => Path.GetFileNameWithoutExtension(x.FileName)) />
            <PropertyColumn Property="x => x._numberOfBoxes" Title="No. Of Boxes" />
            <PropertyColumn Property="x => x.BoxParameters.Count" Title="Parameters">
                <CellTemplate>
                <MudButton OnClick="() => ViewParameters(context.Item, context.Item.FileName)" Variant="Variant.Filled" Color="Color.Tertiary">View</MudButton>
            </CellTemplate>
            </PropertyColumn> 
            <PropertyColumn Property="x => x.Varieties">
                <CellTemplate>
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="() => ViewVarieties(context.Item)">View</MudButton>
                </CellTemplate>
            </PropertyColumn>
        </Columns>
    </MudDataGrid>
}
else if(view && viewParameter is false)
{
    <VarietyList indexOfPicData="passIndex" GoBack="View" />
}
@if(viewParameter)
{
    <PictureDataBox ImageURL="@urlPass" PicData="picDataPass" GoBack="CloseParameters"></PictureDataBox>
}

@code
{
    private int passIndex;
    private bool view = false;
    public void ViewVarieties(PictureData p)
    {
        passIndex = currentJob.PictureData.IndexOf(p);
        if (view)
        { view = false; }
        else
        { view = true; }
        StateHasChanged();
    }

    public void View()
    {
        view = false;
        StateHasChanged();
    }

    public Job currentJob;
    public string currentUser;

    IEnumerable<PictureData> ListOfPicData = new List<PictureData>();
    List<string> imageUrls = new List<string>();

    public string MatchUrl(string picture)
    {
        foreach (string url in imageUrls)
        {
            string PicDataFileName = Path.GetFileNameWithoutExtension(picture);
            string IterationUrl = Path.GetFileNameWithoutExtension(url);

            if (IterationUrl.EndsWith(PicDataFileName))
            {
                return url;
            }
        }
        return null;
    }

    public void CloseParameters()
    {
        view = false;
        viewParameter = false;
    }

    PictureData picDataPass;
    string urlPass;
    bool viewParameter;
    public void ViewParameters(PictureData p, string url)
    {
        view = true;
        this.urlPass = MatchUrl(url);
        picDataPass = p;
        if(!viewParameter)
        { viewParameter = true; }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var AuthState = await AuthProvider.GetAuthenticationStateAsync();

        currentUser = AuthState.User.Identity.Name;

        if (currentJob == null)
        {
            currentJob = await js.RequestCurrentJob(currentUser);
        }
        await InvokeAsync(() => StateHasChanged());

        if (currentJob is not null)
        {
            List<PictureData> FilteredListOfPicData = currentJob.PictureData
        .Where(x => !string.IsNullOrEmpty(x.OutPath))
        .ToList();
            ListOfPicData = FilteredListOfPicData;
            imageUrls = currentJob.FrontLineUpUrls;
        }
    }
}