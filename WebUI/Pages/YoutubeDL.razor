@page "/Youtube Downloader"
@using BulkThumbnailCreator.Services
@using BulkThumbnailCreator
@using WebUI.Components
@inject CreatorService CreatorService
@inject Settings settings
@inject IJSRuntime JSinterOP

@if (!Loading)
{
    <MudContainer MaxWidth="MudBlazor.MaxWidth.Small">
        <MudAlert Dense="true" Icon="@Icons.Material.Filled.Download" Variant="Variant.Outlined" Severity="Severity.Success">
            Youtube video downloader, also able to extract only sound from a given video,
            can also split a video into its chapters and much more
        </MudAlert>
        <MudTextField AdornmentColor="Color.Success" Label="Youtube Link" Variant="Variant.Outlined" @bind-Value="youtubeLink" />
        <MudButton OnClick="(() => FetchVideo(youtubeLink))" ButtonType="ButtonType.Submit" Color="Color.Success" Variant="Variant.Filled">Fetch Video</MudButton>
    @if (FetchedVideoPath != "")
    {
        <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Download" OnClick="DLvideo">Download Video</MudButton>
    }
    </MudContainer>
}
else
{
    <IntermediateLoading>

    </IntermediateLoading>
}


@code
{
    string youtubeLink { get; set; }
    string FetchedVideoPath { get; set; } = "";
    bool Loading { get; set; }

    private async Task DLvideo()
    {
        await JSinterOP.InvokeVoidAsync("downloadFileFromUrl", FetchedVideoPath);
    }

    async void FetchVideo(string YTlink)
    {
        Loading = true;
        FetchedVideoPath = await CreatorService.FetchVideo(YTlink, settings);
        Loading = false;
        await InvokeAsync(StateHasChanged);

        string videoname;
        @if (!string.IsNullOrEmpty(FetchedVideoPath))
        {
            videoname = Path.GetFileName(FetchedVideoPath);
        }
        else
        {
            videoname = Path.GetFileName(settings.PathToVideo);
        }
        if (FetchedVideoPath is not null)
        {
            if (!File.Exists($"wwwroot/{videoname}"))
            {
                File.Copy($"{settings.YTDLOutPutDir}/{videoname}", $"wwwroot/{videoname}");
            }
            FetchedVideoPath = Path.GetFileName($"wwwwroot/{videoname}");
        }
    }
}
