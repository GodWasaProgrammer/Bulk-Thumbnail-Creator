@using BulkThumbnailCreator
@using BulkThumbnailCreator.Enums;
@using BulkThumbnailCreator.PictureClasses
@using BulkThumbnailCreator.Services
@using DlibDotNet
@using Microsoft.AspNetCore.Components;
@using MudBlazor.Utilities;
@using BulkThumbnailCreator.Interfaces;
@using System;

@inject CreatorService PicDataService
@inject ILogService Logger;
@inject Settings Settings;

<ParamModifier ImageURL="@ImageUrl" pictureData="CurrentPagePictureData"></ParamModifier>
<MudButton Variant="Variant.Filled" Color="Color.Secondary" Disabled="@_processing" @onclick="CreateCustomPicDataObject">Produce</MudButton>

@code
{
    public void Reset()
    {
        CurrentPagePictureData = null;
        ImageUrl = null;
        CurrentJob = null;
        StateHasChanged();
    }

    /// <summary>
    /// Delegate to let our parent components know we have produced a new picture
    /// </summary>
    [Parameter]
    public Action<PictureData, string> OnCustomBoxHasProducedPicture { get; set; }

    // this is the image URL of the image being edited
    [Parameter]
    public string ImageUrl { get; set; }

    [Parameter]
    public Job CurrentJob { get; set; }

    // our passed in PictureData, this represents the current image being edited
    [Parameter]
    public PictureData CurrentPagePictureData { get; set; }

    /// <summary>
    /// If this is true, then we are currently processing results with Bulk Thumbnail Creator
    /// </summary>
    private bool _processing = false;

    protected override void OnParametersSet()
    {

    }

    /// <summary>
    /// This calls the service which in turns calls BTC and produces a new picture
    /// </summary>
    public async void CreateCustomPicDataObject()
    {
        _processing = true;
        if (CurrentPagePictureData.BoxParameters.Any(x => x.MemeBool))
        {
            CurrentPagePictureData.OutPutType = OutputType.MemeVariety;
        }
        else
        {
            CurrentPagePictureData.OutPutType = OutputType.Custom;

            foreach (var param in CurrentPagePictureData.BoxParameters)
            {
                if (param.Meme is not null)
                    param.Meme = null;
            }
        }

        // The actual Service call where the production happens
        CurrentPagePictureData = await PicDataService.CreateCustomPicDataObject(CurrentPagePictureData, CurrentJob);

        // get relative path of the out path
        var currentDir = Directory.GetCurrentDirectory();
        var imgUrlRelative = Path.GetRelativePath(currentDir, CurrentPagePictureData.OutPath);
        var addBackSlash = "/" + imgUrlRelative;
        // ReSharper disable once IdentifierTypo
        var replacefrontslash = addBackSlash.Replace('\\', '/');

        ImageUrl = replacefrontslash;
        StateHasChanged();
        OnCustomBoxHasProducedPicture?.Invoke(CurrentPagePictureData, ImageUrl);
        _processing = false;
        StateHasChanged();
    }
}