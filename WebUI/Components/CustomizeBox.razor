@using Bulk_Thumbnail_Creator.Enums;
@using Bulk_Thumbnail_Creator.PictureObjects;
@using Bulk_Thumbnail_Creator.Services
@using Microsoft.AspNetCore.Components;
@using MudBlazor.Utilities;
@using Bulk_Thumbnail_Creator.Interfaces;

@inject PicDataService PicDataService
@inject ILogService logger;
 
<PickedBox OnBoxSelected="HandleBoxSelection" CurrentPagePictureData="CurrentPagePictureData" PickBox="PickedBox"></PickedBox>

@if(PickedBox != BoxType.None)
{
<MudPaper Class="mb-4">

    <MudColorPicker PickerVariant="PickerVariant.Dialog" ColorPickerMode="ColorPickerMode.HSL" DisableAlpha DisableModeSwitch @bind-Value="colorvalue"></MudColorPicker>

    <MudSelect AdornmentColor="Color.Primary" Label="Select a Color to edit" @bind-Value="PickedGroup">

        @foreach (var Colorz in colorBoxes)
        {
            <MudSelectItem Value="@Colorz"><MudText Color="Color.Secondary">@Colorz</MudText></MudSelectItem>
        }

    </MudSelect>

    <MudButton Color="Color.Primary" @onclick="() => SetColor(PickedGroup)">Set Color</MudButton>

    <MudSelect AdornmentColor="Color.Primary" Label="Select a font" @bind-Value="PickedFont">

        @foreach (var font in AvailableFonts)
        {
            <MudSelectItem Value="@font"><MudText Color="Color.Secondary">@font</MudText></MudSelectItem>
        }

    </MudSelect>

    @if(PickedBox != BoxType.None)
        {
            // find the box that we are editing
            var param = CurrentPagePictureData.BoxParameters.FirstOrDefault(p => p.CurrentBox.Type == PickedBox);

            <ParamDisplay param="param"></ParamDisplay>
        }

        <MudButton Color="Color.Secondary" Disabled="@_processing" @onclick="CreateCustomPicDataObject">Produce</MudButton>

</MudPaper>
}
@code
{
    private void HandleBoxSelection(BoxType selectedBox)
    {
        PickedBox = selectedBox;
        StateHasChanged();
    }
    /// <summary>
    /// Delegate to let our parent components know we have produced a new picture
    /// </summary>
    [Parameter]
    public Action<PictureData,string> OnCustomBoxHasProducedPicture { get; set; }

    // this is the image URL of the image being edited
    [Parameter]
    public string ImageURL { get; set; }

    // our passed in picturedata, this represents the current image being edited
    [Parameter]
    public PictureData CurrentPagePictureData { get; set; }

    // this is the separate PicData object being passed back in as you create a custom Picture, every production will be considered a new picture
    public PictureData PicDataToCustomize = new();

    // The PickedBox that we have chosen to edit
    public BoxType PickedBox { get; set; } = BoxType.None;

    // the text that we are producing on the pictures
    public List<string> InputText { get; set; }

    public BoxType MemeBox { get; set; }

    /// <summary>
    /// List of the fonts available on drive
    /// </summary>
    public List<string> AvailableFonts { get { return Directory.GetFiles("Fonts", "*.TTF*").ToList(); } }


    private string _PickedFont;
    /// <summary>
    /// Our Font that has been selected for production
    /// </summary>
    public string PickedFont
    {
        get
        {
            _PickedFont ??= CurrentPagePictureData.BoxParameters[0].Font;

            return _PickedFont;
        }
        set { _PickedFont = value; }
    }

    /// <summary>
    /// If this is true, then we are currently processing results with Bulk Thumbnail Creator
    /// </summary>
    private bool _processing = false;

    /// <summary>
    /// our list of ColorGroup items 
    /// </summary>
    private List<ColorGroup> colorBoxes = Enum.GetValues(typeof(ColorGroup)).Cast<ColorGroup>().ToList();

    private ColorGroup PickedGroup;
    
    /// <summary>
    /// wtf is this
    /// </summary>
    private MudColor colorvalue;

    // get value from picker
    private MudColor BorderColor;
    // set value and display it
    private ColorItem BorderCLRItem;

    // get value from picker
    private MudColor FillColor;
    // set value and display it
    private ColorItem fillCLRItem;

    // get value from picker
    private MudColor StrokeColor;
    // set value and display it
    private ColorItem StrokeCLRItem;

    private enum ColorGroup
    {
        FillColor,
        BorderColor,
        StrokeColor
    }

    private void SetColor(ColorGroup clrGRP)
    {
        DecideWhichBoxToEdit();

        if (clrGRP == ColorGroup.BorderColor)
        {
            BorderColor = colorvalue;
            BorderCLRItem.SetByHSL((float)BorderColor.H, (float)BorderColor.S, (float)BorderColor.L);
        }
        if (clrGRP == ColorGroup.FillColor)
        {
            FillColor = colorvalue;
            fillCLRItem.SetByHSL((float)FillColor.H, (float)FillColor.S, (float)FillColor.L);
        }
        if (clrGRP == ColorGroup.StrokeColor)
        {
            StrokeColor = colorvalue;
            StrokeCLRItem.SetByHSL((float)StrokeColor.H, (float)StrokeColor.S, (float)StrokeColor.L);
        }
        StateHasChanged();
    }

    private void DecideWhichBoxToEdit()
    {
        var boxToEdit = BoxParameters.Find(x => x.CurrentBox.Type == PickedBox);

        ConstructParameter(boxToEdit);
    }

    private void ConstructParameter(ParamForTextCreation paramIn)
    {
        Box liftBoxData = new();

        // this needs to happen because the PickedBox is an enum, and the boxdata is a class
        liftBoxData = CurrentPagePictureData.BoxParameters[0].Boxes.Find( x => x.Type == PickedBox);

        // makes sure that your boxdata object is correctly set
        paramIn.CurrentBox = liftBoxData;
        paramIn.Font = PickedFont;

        // construct color objects

        paramIn.BorderColor.SetByHSL(BorderCLRItem.Hue, BorderCLRItem.Saturation, BorderCLRItem.Luminance);
        paramIn.FillColor.SetByHSL(fillCLRItem.Hue, fillCLRItem.Saturation, fillCLRItem.Luminance);
        paramIn.StrokeColor.SetByHSL(StrokeCLRItem.Hue, StrokeCLRItem.Saturation, StrokeCLRItem.Luminance);

        // colors are set
    }

    List<ParamForTextCreation> BoxParameters = new();

    public async void CreateCustomPicDataObject()
    {
        // makes a copy of our current page picture data to avoid reference issues
        PictureData PicDataToCustomize = new(CurrentPagePictureData);

        /// these are our edited boxes that we will write to the picturedata object
        PicDataToCustomize.BoxParameters = BoxParameters;

        OutputType jobtype = OutputType.Custom;
        PicDataToCustomize = await PicDataService.CreateCustomPicDataObject(PicDataToCustomize, jobtype);
        // ShowCustomPicture(PicDataToCustomize);

        // get relative path of the outpath
        string currentDir = Directory.GetCurrentDirectory();
        string imgUrlRelative = Path.GetRelativePath(currentDir, PicDataToCustomize.OutPath);
        string addBackSlash = "/" + imgUrlRelative;
        string replacefrontslash = addBackSlash.Replace('\\', '/');

        ImageURL = replacefrontslash;
        StateHasChanged();
        OnCustomBoxHasProducedPicture?.Invoke(PicDataToCustomize,ImageURL);
    }

    private void BuildBoxParameters()
    {
        BoxParameters = new List<ParamForTextCreation>(CurrentPagePictureData.BoxParameters);
    }

    protected override void OnInitialized()
    {
        if (CurrentPagePictureData != null)
        {
            
        foreach (var boxparam in CurrentPagePictureData.BoxParameters)
        {

            BorderCLRItem = boxparam.BorderColor;
            fillCLRItem = boxparam.FillColor;
            StrokeCLRItem = boxparam.StrokeColor;
        }
            BuildBoxParameters();
        }

    }
}
