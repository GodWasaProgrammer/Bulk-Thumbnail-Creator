@using Bulk_Thumbnail_Creator.Enums;
@using Bulk_Thumbnail_Creator.PictureObjects;
@using Bulk_Thumbnail_Creator.Services
@using Microsoft.AspNetCore.Components;
@using MudBlazor.Utilities;
@using Bulk_Thumbnail_Creator.Interfaces;
@using System;

@inject PicDataService PicDataService
@inject ILogService logger;

@*First you will pick a box, this will default be the first box in the list *@
@if (CurrentPagePictureData != null)
{
    <MudSelect AdornmentColor="Color.Primary" Label="Select an output box" @bind-Value="PickedBox">

        @if (CurrentPagePictureData != null)
        {
            @if (CurrentPagePictureData.BoxParameters != null)
            {
                @foreach (ParamForTextCreation boxParam in CurrentPagePictureData.BoxParameters)
                {
                    BoxType boxType = boxParam.CurrentBox.Type;

                    <MudSelectItem Value="@boxParam.CurrentBox.Type"><MudText Color="Color.Secondary">@boxParam.CurrentBox.Type</MudText></MudSelectItem>
                }
            }
        }

    </MudSelect>

@*This allows you to swap to inserting a meme instead of text*@
<MudButton Color="Color.Success" @onclick="() => MemeSelected()">@MemeOrText</MudButton>
}

    @*This is our Text Customization options with Fonts,Colors, etc*@
    @if (PickedBox != BoxType.None)
{
    <MudPaper Class="mb-4">

        @if (Meme == false)
        {
            <MudColorPicker PickerVariant="PickerVariant.Dialog" ColorPickerMode="ColorPickerMode.HSL" DisableAlpha DisableModeSwitch @bind-Value="colorvalue"></MudColorPicker>

            <MudSelect AdornmentColor="Color.Primary" Label="Select a Color to edit" @bind-Value="PickedGroup">

                @foreach (var Colorz in colorBoxes)
                {
                    <MudSelectItem Value="@Colorz"><MudText Color="Color.Secondary">@Colorz</MudText></MudSelectItem>
                }

            </MudSelect>

            <MudButton Color="Color.Primary" @onclick="() => SetColor(PickedGroup)">Set Color</MudButton>

            <MudSelect AdornmentColor="Color.Primary" Label="Select a font" @bind-Value="PickedFont">

                @foreach (var fontPath in AvailableFonts)
                {
                    string fontFileName = Path.GetFileNameWithoutExtension(fontPath);
                    <MudSelectItem Value="@fontPath"><MudText Color="Color.Secondary">@fontFileName</MudText></MudSelectItem>
                }
            </MudSelect>

            <MudSelect AdornmentColor="Color.Primary" Label="Select text" @bind-Value="PickedText">

                @foreach (var text in InputText)
                {
                    <MudSelectItem Value="@text"><MudText Color="Color.Secondary">@text</MudText></MudSelectItem>
                }
            </MudSelect>

            @if (!AddText)
            {
                <MudButton OnClick="AddNewText" Color="Color.Primary">Add new text</MudButton>
            }
            @if (AddText)
            {
                <MudTextField Margin="Margin.Dense" Label="Add text here" Variant="Variant.Filled" @bind-Value="textToAdd" />
                <MudButton Color="Color.Primary" OnClick="SaveText">Save</MudButton>

                @if (nullOrWhiteSpace)
                {
                    <MudText Color="Color.Secondary">Bruh. You forgot to enter your text.</MudText>
                }

            }

        }
        else
        {
            <MudSelect AdornmentColor="Color.Primary" Label="Select a meme" @bind-Value="PickedMeme">

                @foreach (var memePath in AvailableMemes)
                {
                    string memeFileName = Path.GetFileNameWithoutExtension(memePath);
                    <MudSelectItem Value="@memePath"><MudText Color="Color.Secondary">@memeFileName</MudText></MudSelectItem>
                }

            </MudSelect>
        }

        @if (CurrentPagePictureData != null)
        {


            @if (PickedBox != BoxType.None)
            {
                // find the box that we are editing
                ParamForTextCreation param = BoxParameters.FirstOrDefault(p => p.CurrentBox.Type == PickedBox);
                <ParamDisplay param="param"></ParamDisplay>
            }

            <MudButton Color="Color.Secondary" Disabled="@_processing" @onclick="CreateCustomPicDataObject">Produce</MudButton>
        }

    </MudPaper>
}

@code
{
    public void reset()
    {
        CurrentPagePictureData = null;
        ImageURL = null;
        PickedBox = BoxType.None;
        PickedFont = null;
        PickedText = null;
        PicDataToCustomize = null;
        BoxParameters = null;
        InputText = null;
        StateHasChanged();
    }

    private bool nullOrWhiteSpace;

    private void SaveText()
    {
        // verifies that the user doesnt try to add a null or whitespace string
        nullOrWhiteSpace = String.IsNullOrWhiteSpace(textToAdd);

        // if the list doesnt contain the entry and the entry is not null or whitespace, then add it
        if (!InputText.Contains(textToAdd) && !nullOrWhiteSpace)
        {
            InputText.Add(textToAdd);
            // reset the add text bool
            AddText = false;
        }
        StateHasChanged();
    }

    private bool AddText = false;

    private string textToAdd;

    private void AddNewText()
    {
        if (AddText)
            AddText = false;
        else
            AddText = true;
    }

    /// <summary>
    /// Delegate to let our parent components know we have produced a new picture
    /// </summary>
    [Parameter]
    public Action<PictureData, string> OnCustomBoxHasProducedPicture { get; set; }

    // this is the image URL of the image being edited
    [Parameter]
    public string ImageURL { get; set; }

    // our passed in picturedata, this represents the current image being edited
    [Parameter]
    public PictureData CurrentPagePictureData { get; set; }

    // this is the separate PicData object being passed back in as you create a custom Picture, every production will be considered a new picture
    public PictureData PicDataToCustomize = new();

    List<ParamForTextCreation> BoxParameters = new();

    // The PickedBox that we have chosen to edit
    public BoxType PickedBox { get; set; }

    // the text that we are producing on the pictures
    private List<string> InputText = new();

    private string PickedText;

    /// <summary>
    /// List of the fonts available on drive
    /// </summary>
    private List<string> AvailableFonts { get { return Directory.GetFiles("Fonts", "*.TTF*").ToList(); } }

    /// <summary>
    /// Our picked meme
    /// </summary>
    private string PickedMeme;

    private List<string> AvailableMemes { get { return Directory.GetFiles("DankMemeStash").ToList(); } }

    private string _PickedFont;
    /// <summary>
    /// Our Font that has been selected for production
    /// </summary>
    public string PickedFont
    {
        get
        {
            _PickedFont ??= CurrentPagePictureData.BoxParameters[0].Font;

            return _PickedFont;
        }
        set { _PickedFont = value; }
    }

    /// <summary>
    /// If this is true, then we are currently processing results with Bulk Thumbnail Creator
    /// </summary>
    private bool _processing = false;

    /// <summary>
    /// Bool to swap between meme and text and related fields
    /// </summary>
    private void MemeSelected()
    {
        if (Meme)
        {
            Meme = false;
            MemeOrText = "Use Meme instead";
        }
        else
        {
            Meme = true;
            MemeOrText = "Use Text instead";
        }
    }

    private bool Meme = false;

    private string MemeOrText = "Use Meme instead";

    #region ColorLogic
    /// <summary>
    /// Logic to set the correlating colors of the colorgroups based on which you have selected
    /// This however only sets the local color items, not the parameters
    /// </summary>
    /// <param name="clrGRP"></param>
    private void SetColor(ColorGroup clrGRP)
    {
        DecideWhichBoxToEdit();

        if (clrGRP == ColorGroup.BorderColor)
        {
            BorderColor = colorvalue;
            BorderCLRItem.SetByHSL((float)BorderColor.H, (float)BorderColor.S, (float)BorderColor.L);
        }
        if (clrGRP == ColorGroup.FillColor)
        {
            FillColor = colorvalue;
            fillCLRItem.SetByHSL((float)FillColor.H, (float)FillColor.S, (float)FillColor.L);
        }
        if (clrGRP == ColorGroup.StrokeColor)
        {
            StrokeColor = colorvalue;
            StrokeCLRItem.SetByHSL((float)StrokeColor.H, (float)StrokeColor.S, (float)StrokeColor.L);
        }
        StateHasChanged();
    }

    /// <summary>
    /// our list of ColorGroup items
    /// </summary>
    private List<ColorGroup> colorBoxes = Enum.GetValues(typeof(ColorGroup)).Cast<ColorGroup>().ToList();

    private ColorGroup PickedGroup;

    /// <summary>
    /// this is the color value being returned from the color picker
    /// </summary>
    private MudColor colorvalue;

    // get value from picker
    private MudColor BorderColor;
    // set value and display it
    private ColorItem BorderCLRItem;

    // get value from picker
    private MudColor FillColor;
    // set value and display it
    private ColorItem fillCLRItem;

    // get value from picker
    private MudColor StrokeColor;
    // set value and display it
    private ColorItem StrokeCLRItem;

    /// <summary>
    /// Selection enum for our color group
    /// </summary>
    private enum ColorGroup
    {
        FillColor,
        BorderColor,
        StrokeColor
    }
    #endregion
    /// <summary>
    /// Finds the box that we are editing as you select a box from the dropdown menu
    /// </summary>
    private void DecideWhichBoxToEdit()
    {
        ParamForTextCreation ParameterToEdit = BoxParameters.Find(x => x.CurrentBox.Type == PickedBox);
        ConstructParameter(ParameterToEdit);
    }

    /// <summary>
    /// This constructs the Parameter for the selected box
    /// </summary>
    /// <param name="paramIn"></param>
    private void ConstructParameter(ParamForTextCreation paramIn)
    {
        paramIn.Font = PickedFont;

        if (PickedText != null)
        {
            paramIn.Text = PickedText;
        }
        // construct color objects
        paramIn.BorderColor.SetByHSL(BorderCLRItem.Hue, BorderCLRItem.Saturation, BorderCLRItem.Luminance);
        paramIn.FillColor.SetByHSL(fillCLRItem.Hue, fillCLRItem.Saturation, fillCLRItem.Luminance);
        paramIn.StrokeColor.SetByHSL(StrokeCLRItem.Hue, StrokeCLRItem.Saturation, StrokeCLRItem.Luminance);
        // colors are set
    }

    /// <summary>
    /// This calls the service which in turns calls BTC and produces a new picture
    /// This also
    /// </summary>
    public async void CreateCustomPicDataObject()
    {
        // makes a copy of our current page picture data
        PictureData PicDataToCustomize = new(CurrentPagePictureData);

        if (Meme)
        {
            BoxParameters.Find(x => x.CurrentBox.Type == PickedBox).Meme = PickedMeme;
            PicDataToCustomize.OutPutType = OutputType.MemeVariety;
        }
        else
        {
            BoxParameters.Find(x => x.CurrentBox.Type == PickedBox).Meme = null;
            BoxParameters.Find(x => x.CurrentBox.Type == PickedBox).Font = PickedFont;
            if (PickedText != null)
            {
                BoxParameters.Find(x => x.CurrentBox.Type == PickedBox).Text = PickedText;
            }

        }

        /// these are our edited boxes that we will write to the picturedata object
        /// The BoxParameters is the local edited box parameters
        PicDataToCustomize.BoxParameters = BoxParameters;

        /// The actual Service call where the production happens
        PicDataToCustomize = await PicDataService.CreateCustomPicDataObject(PicDataToCustomize);

        // get relative path of the outpath
        string currentDir = Directory.GetCurrentDirectory();
        string imgUrlRelative = Path.GetRelativePath(currentDir, PicDataToCustomize.OutPath);
        string addBackSlash = "/" + imgUrlRelative;
        string replacefrontslash = addBackSlash.Replace('\\', '/');

        ImageURL = replacefrontslash;
        StateHasChanged();
        OnCustomBoxHasProducedPicture?.Invoke(PicDataToCustomize, ImageURL);
    }

    protected override void OnInitialized()
    {
        if (CurrentPagePictureData != null)
            foreach (var boxparam in CurrentPagePictureData.BoxParameters)
            {
                BorderCLRItem = boxparam.BorderColor;
                fillCLRItem = boxparam.FillColor;
                StrokeCLRItem = boxparam.StrokeColor;

                // add the text to our list of text
                if (!InputText.Contains(boxparam.Text))
                    InputText.Add(boxparam.Text);
            }
        BuildBoxParameters();
    }

    /// <summary>
    /// Builds our boxes on initialization
    /// </summary>
    private void BuildBoxParameters()
    {
        BoxParameters = new List<ParamForTextCreation>(CurrentPagePictureData.BoxParameters);
        PickedBox = BoxParameters[0].CurrentBox.Type;
    }

}