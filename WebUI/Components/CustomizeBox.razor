@using BulkThumbnailCreator
@using BulkThumbnailCreator.Enums;
@using BulkThumbnailCreator.PictureClasses
@using BulkThumbnailCreator.Services
@using DlibDotNet
@using Microsoft.AspNetCore.Components;
@using MudBlazor.Utilities;
@using BulkThumbnailCreator.Interfaces;
@using System;

@inject CreatorService PicDataService
@inject ILogService Logger;
@inject Settings Settings;

@*First you will pick a box, this will default be the first box in the list *@
@if (CurrentPagePictureData != null)
{
    <MudSelect AdornmentColor="Color.Primary" Label="Select an output box" @bind-Value="PickedBox">
        @if (CurrentPagePictureData != null)
        {
            @foreach (var boxParam in _boxParameters)
            {
                <MudSelectItem Value="@boxParam.CurrentBox.Type"><MudText Color="Color.Secondary">@boxParam.CurrentBox.Type</MudText></MudSelectItem>
            }
        }
    </MudSelect>

    @if (_overrideBoxes is not true)
    {
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="BuildOverrideBoxes">Override Boxes</MudButton>
    }

    @if (_overrideBoxes)
    {
        <MudSelect AdornmentColor="Color.Primary" Label="Select a box to override to" @bind-Value="_pickedOverrideBox">
            @foreach (var param in _overrideBoxList)
            {
                <MudSelectItem Value="@param.CurrentBox.Type"><MudText Color="Color.Secondary">@param.CurrentBox.Type</MudText>select box to override with</MudSelectItem>
            }
        </MudSelect>
        <MudButton OnClick="OverWriteBox">Overwrite</MudButton>
    }

    @*This allows you to swap to inserting a meme instead of text*@
    <MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="MemeSelected">@_memeOrText</MudButton>
}

@*This is our Text Customization options with Fonts,Colors, etc*@
@if (PickedBox != BoxType.None)
{
    <MudPaper Class="mb-4">

        @if (_meme == false)
        {
            <MudColorPicker PickerVariant="PickerVariant.Dialog" ColorPickerMode="ColorPickerMode.HSL" DisableAlpha DisableModeSwitch @bind-Value="_colorValue"></MudColorPicker>
            @if(_noPickedColor)
            {
                <MudText>@_pickColor</MudText>
            }
            <MudSelect AdornmentColor="Color.Primary" Label="Select a Color to edit" @bind-Value="_pickedGroup">

                @foreach (var color in _colorBoxes)
                {
                    <MudSelectItem Value="@color"><MudText Color="Color.Secondary">@color</MudText></MudSelectItem>
                }

            </MudSelect>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="() => SetColor(_pickedGroup)">Set Color</MudButton>

            <MudSelect Variant="Variant.Text" AdornmentColor="Color.Primary" Label="Select a font" @bind-Value="PickedFont">

                @foreach (var fontPath in AvailableFonts)
                {
                    var fontFileName = Path.GetFileNameWithoutExtension(fontPath);
                    <MudSelectItem Value="@fontPath" Style="@(($"font-family: '{fontFileName}';"))"><MudText Color="Color.Secondary">@fontFileName</MudText></MudSelectItem>
                }

            </MudSelect>

            <MudSelect AdornmentColor="Color.Primary" Label="Select text" @bind-Value="_pickedText">

                @foreach (var text in _inputText)
                {
                    <MudSelectItem Value="@text"><MudText Color="Color.Secondary">@text</MudText></MudSelectItem>
                }

            </MudSelect>

            @if (!_addText)
            {
                <MudButton Variant="Variant.Filled" OnClick="AddNewText" Color="Color.Primary">Add new text</MudButton>
            }
            @if (_addText)
            {
                <MudTextField Margin="Margin.Dense" Label="Add text here" Variant="Variant.Filled" @bind-Value="_textToAdd" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveText">Save</MudButton>

                @if (_nullOrWhiteSpace)
                {
                    <MudText Color="Color.Secondary">Bruh. You forgot to enter your text.</MudText>
                }
            }
        }
        else
        {
            <MudSelect AdornmentColor="Color.Primary" Label="Select a meme" @bind-Value="_pickedMeme">

                @foreach (var memePath in AvailableMemes)
                {
                    var memeFileName = Path.GetFileNameWithoutExtension(memePath);
                    <MudSelectItem Value="@memePath"><MudText Color="Color.Secondary">@memeFileName</MudText></MudSelectItem>
                }

            </MudSelect>
        }

        @if (CurrentPagePictureData != null)
        {
            @if (PickedBox != BoxType.None)
            {
                // find the box that we are editing
                var param = _boxParameters.FirstOrDefault(p => p.CurrentBox.Type == PickedBox);
                <ParamDisplay param="param"></ParamDisplay>
            }
        }
    </MudPaper>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Disabled="@_processing" @onclick="CreateCustomPicDataObject">Produce</MudButton>
}

@code
{
    public void Reset()
    {
        CurrentPagePictureData = null;
        ImageUrl = null;
        PickedBox = BoxType.None;
        PickedFont = null;
        _pickedText = null;
        PicDataToCustomize = null;
        CurrentJob = null;
        _boxParameters = null;
        _inputText = null;
        StateHasChanged();
    }

    private bool _nullOrWhiteSpace;
    private void SaveText()
    {
        // verifies that the user doesn't try to add a null or whitespace string
        _nullOrWhiteSpace = string.IsNullOrWhiteSpace(_textToAdd);

        // if the list doesn't contain the entry and the entry is not null or whitespace, then add it
        if (!_inputText.Contains(_textToAdd) && !_nullOrWhiteSpace)
        {
            _inputText.Add(_textToAdd);
            // reset the add text bool
            _addText = false;
        }
        StateHasChanged();
    }

    private bool _addText = false;
    private string _textToAdd;
    private void AddNewText()
    {
        _addText = !_addText;
    }

    /// <summary>
    /// Delegate to let our parent components know we have produced a new picture
    /// </summary>
    [Parameter]
    public Action<PictureData, string> OnCustomBoxHasProducedPicture { get; set; }

    // this is the image URL of the image being edited
    [Parameter]
    public string ImageUrl { get; set; }

    [Parameter]
    public Job CurrentJob { get; set; }

    // our passed in PictureData, this represents the current image being edited
    [Parameter]
    public PictureData CurrentPagePictureData { get; set; }

    private string _pickedText;
    // this is the separate PicData object being passed back in as you create a custom Picture, every production will be considered a new picture
    public PictureData PicDataToCustomize = new();
    List<ParamForTextCreation> _boxParameters = new();

    // The PickedBox that we have chosen to edit
    public BoxType PickedBox { get; set; }

    // the text that is input by the user
    private List<string> _inputText = new();

    /// <summary>
    /// List of the fonts available on drive
    /// </summary>
    private List<string> AvailableFonts => Directory.GetFiles("Fonts", "*.TTF*").ToList();

    private string _pickedFont;
    /// <summary>
    /// Our Font that has been selected for production
    /// </summary>
    public string PickedFont
    {
        get
        {
            _pickedFont ??= CurrentPagePictureData.BoxParameters[0].Font;

            return _pickedFont;
        }
        set => _pickedFont = value;
    }

    /// <summary>
    /// If this is true, then we are currently processing results with Bulk Thumbnail Creator
    /// </summary>
    private bool _processing = false;

    /// Our picked meme
    private string _pickedMeme;
    private List<string> AvailableMemes => Directory.GetFiles("DankMemeStash").ToList();

    /// Bool to swap between meme and text and related fields
    private bool _meme = false;
    private string _memeOrText = "Use Meme instead";

    private void MemeSelected()
    {
        if (_meme)
        {
            _meme = false;
            _memeOrText = "Use Meme instead";
        }
        else
        {
            _meme = true;
            _memeOrText = "Use Text instead";
        }
    }

    #region ColorLogic
    private bool _noPickedColor = false;
    private string _pickColor;
    /// <summary>
    /// Logic to set the correlating colors of the color groups based on which you have selected
    /// This however only sets the local color items, not the parameters
    /// </summary>
    /// <param name="clrGrp"></param>
    private void SetColor(ColorGroup clrGrp)
    {
        DecideWhichBoxToEdit();

        if (_colorValue == null)
        {
            _noPickedColor = true;
            _pickColor = "Use the Color picker to choose a color";
            return;
        }

        _pickColor = string.Empty;
        _noPickedColor = false;
        switch (clrGrp)
        {
            case ColorGroup.FillColor:
                _fillColor = _colorValue;
                _fillClrItem.SetByHSL((float)_fillColor.H, (float)_fillColor.S, (float)_fillColor.L);
                break;
            case ColorGroup.StrokeColor:
                _strokeColor = _colorValue;
                _strokeClrItem.SetByHSL((float)_strokeColor.H, (float)_strokeColor.S, (float)_strokeColor.L);
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(clrGrp), clrGrp, null);
        }
        StateHasChanged();
    }

    /// <summary>
    /// our list of ColorGroup items
    /// </summary>
    private List<ColorGroup> _colorBoxes = Enum.GetValues(typeof(ColorGroup)).Cast<ColorGroup>().ToList();
    private ColorGroup _pickedGroup;

    /// <summary>
    /// this is the color value being returned from the color picker
    /// </summary>
    private MudColor _colorValue;

    // get value from picker
    private MudColor _fillColor;
    // set value and display it
    private ColorItem _fillClrItem;

    // get value from picker
    private MudColor _strokeColor;
    // set value and display it
    private ColorItem _strokeClrItem;

    /// <summary>
    /// Selection enum for our color group
    /// </summary>
    private enum ColorGroup
    {
        FillColor,
        StrokeColor
    }
    #endregion
    /// <summary>
    /// Finds the box that we are editing as you select a box from the dropdown menu
    /// </summary>
    private void DecideWhichBoxToEdit()
    {
        var parameterToEdit = _boxParameters.Find(x => x.CurrentBox.Type == PickedBox);
        ConstructParameter(parameterToEdit);
    }

    /// <summary>
    /// This constructs the Parameter for the selected box
    /// </summary>
    /// <param name="paramIn"></param>
    private void ConstructParameter(ParamForTextCreation paramIn)
    {
        if (paramIn != null)
        {
            paramIn.Font = PickedFont;

            if (_pickedText != null)
            {
                paramIn.Text = _pickedText;
            }
            paramIn.FillColor.SetByHSL(_fillClrItem.Hue, _fillClrItem.Saturation, _fillClrItem.Luminance);
            paramIn.StrokeColor.SetByHSL(_strokeClrItem.Hue, _strokeClrItem.Saturation, _strokeClrItem.Luminance);
            // colors are set
        }
    }

    /// <summary>
    /// This calls the service which in turns calls BTC and produces a new picture
    /// This also
    /// </summary>
    public async void CreateCustomPicDataObject()
    {
        // makes a copy of our current page picture data
        PictureData picToCustomize = new(CurrentPagePictureData);

        if (_meme)
        {
            _boxParameters.Find(x => x.CurrentBox.Type == PickedBox).Meme = _pickedMeme;
            picToCustomize.OutPutType = OutputType.MemeVariety;
        }
        else
        {
            _boxParameters.Find(x => x.CurrentBox.Type == PickedBox).Meme = null;
            _boxParameters.Find(x => x.CurrentBox.Type == PickedBox).Font = PickedFont;
            if (_pickedText != null)
            {
                _boxParameters.Find(x => x.CurrentBox.Type == PickedBox).Text = _pickedText;
            }
            picToCustomize.OutPutType = OutputType.Custom;
        }

        // these are our edited boxes that we will write to the PictureData object
        // The BoxParameters is the local edited box parameters
        picToCustomize.BoxParameters = _boxParameters;

        // The actual Service call where the production happens
        picToCustomize = await PicDataService.CreateCustomPicDataObject(picToCustomize, Settings, CurrentJob);

        // get relative path of the out path
        var currentDir = Directory.GetCurrentDirectory();
        var imgUrlRelative = Path.GetRelativePath(currentDir, picToCustomize.OutPath);
        var addBackSlash = "/" + imgUrlRelative;
    // ReSharper disable once IdentifierTypo
        var replacefrontslash = addBackSlash.Replace('\\', '/');

        ImageUrl = replacefrontslash;
        StateHasChanged();
        OnCustomBoxHasProducedPicture?.Invoke(picToCustomize, ImageUrl);
    }

    protected override void OnInitialized()
    {
        if (CurrentPagePictureData != null)
            foreach (var boxParam in CurrentPagePictureData.BoxParameters)
            {
                _fillClrItem = boxParam.FillColor;
                _strokeClrItem = boxParam.StrokeColor;

                // add the text to our list of text
                if (!_inputText.Contains(boxParam.Text))
                    _inputText.Add(boxParam.Text);

                InitBoxParam();
            }
    }

    BoxType _pickedOverrideBox;
    public void OverWriteBox()
    {
        var index = _boxParameters.FindIndex(p => p.CurrentBox.Type == PickedBox);
        if (index != -1) // Check if the element was found
        {
            var index2 = _overrideBoxList.FindIndex(p => p.CurrentBox.Type == _pickedOverrideBox);
            _boxParameters[index] = _overrideBoxList[index2]; // Replace the element at the found index with pickedOverrideBox
            PickedBox = _pickedOverrideBox;
        }
        StateHasChanged();
    }

    private bool _overrideBoxes;
    List<ParamForTextCreation> _overrideBoxList = new();
    public void BuildOverrideBoxes()
    {
        // build the list based of the first box parameter and then
        // feed it with a selection of the boxes info and box parameter info
        // to frankenstein together a overridden box selection
        foreach (var box in CurrentPagePictureData.BoxParameters[0].Boxes)
        {
            var param = new ParamForTextCreation
            {
                Text = CurrentPagePictureData.BoxParameters[0].Text,
                Font = CurrentPagePictureData.BoxParameters[0].Font,
                WidthOfBox = box.Width,
                HeightOfBox = box.Height
            };
            param.FillColor.SetByHSL(_fillClrItem.Hue, _fillClrItem.Saturation, _fillClrItem.Luminance);
            param.StrokeColor.SetByHSL(_strokeClrItem.Hue, _strokeClrItem.Saturation, _strokeClrItem.Luminance);
            param.Boxes = CurrentPagePictureData.BoxParameters[0].Boxes;
            param.CurrentBox = new Box(box);
            param.BoxesWithNoFaceIntersect = CurrentPagePictureData.BoxParameters[0].BoxesWithNoFaceIntersect;
            _overrideBoxList.Add(param);
        }
        _overrideBoxes = true;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Builds our boxes on initialization
    /// </summary>
    private void InitBoxParam()
    {
        _boxParameters = new List<ParamForTextCreation>(CurrentPagePictureData.BoxParameters);
        PickedBox = _boxParameters[0].CurrentBox.Type;
    }
}