@using Bulk_Thumbnail_Creator.Enums;
@using Bulk_Thumbnail_Creator.PictureObjects;
@using Bulk_Thumbnail_Creator.Services
@using Microsoft.AspNetCore.Components;
@using MudBlazor.Utilities;
@using Bulk_Thumbnail_Creator.Interfaces;

@inject PicDataService PicDataService
@inject ILogService logger;
@inject NavigationManager navmanager;

<MudPaper Class="mb-4">

    <MudColorPicker PickerVariant="PickerVariant.Dialog" ColorPickerMode="ColorPickerMode.HSL" DisableAlpha DisableModeSwitch @bind-Value="colorvalue"></MudColorPicker>

    <MudSelect AdornmentColor="Color.Primary" Label="Select a Color to edit" @bind-Value="PickedGroup">

        @foreach (var Colorz in colorBoxes)
        {
            <MudSelectItem Value="@Colorz"><MudText Color="Color.Secondary">@Colorz</MudText></MudSelectItem>
        }

    </MudSelect>

    <MudButton Color="Color.Primary" @onclick="() => SetColor(PickedGroup)">Set Color</MudButton>

    <MudSelect AdornmentColor="Color.Primary" Label="Select an output box" @bind-Value="PickedBox">

        @if (CurrentPagePictureData.BoxParameters != null)
        {

            @foreach (ParamForTextCreation boxParam in CurrentPagePictureData.BoxParameters)
            {
                BoxType boxType = boxParam.CurrentBox.Type;

                <MudSelectItem Value="@boxParam.CurrentBox.Type"><MudText Color="Color.Secondary">@boxParam.CurrentBox.Type</MudText></MudSelectItem>
            }
        }

    </MudSelect>

    <MudButton Color="Color.Primary" @onclick="DecideWhichBoxToEdit">Edit Box</MudButton>

    @foreach(ParamForTextCreation param in BoxParameters)
    {
        <ParamDisplay param="param"></ParamDisplay>
    }

    <MudSelect AdornmentColor="Color.Primary" Label="Select a font" @bind-Value="PickedFont">

        @foreach (var font in AvailableFonts)
        {

            <MudSelectItem Value="@font"><MudText Color="Color.Secondary">@font</MudText></MudSelectItem>
        }

    </MudSelect>

</MudPaper>

<MudPaper Class="mb-4">

    <MudContainer>

        <MudGrid Justify="Justify.SpaceBetween">

            <MudItem xs="12" sm="6">
                <div class="mb-2">Picture Data To Produce</div>
                <div class="mb-1">Chosen Font: @Path.GetFileName(PickedFont)</div>
                <div class="mb-1">
                    Chosen Box: 
                        @PickedBox.ToString()
                </div>
            </MudItem>

            <MudItem xs="12" sm="6">
                <div class="mb-2">BorderColor Values</div>
                <div class="mb-1">Hue: @BorderCLRItem.Hue</div>
                <div class="mb-1">Saturation: @BorderCLRItem.Saturation</div>
                <div class="mb-1">Luminance: @BorderCLRItem.Luminance</div>
            </MudItem>

            <MudItem xs="12" sm="6">
                <div class="mb-2">FillColor Values</div>
                <div class="mb-1">Hue: @fillCLRItem.Hue</div>
                <div class="mb-1">Saturation: @fillCLRItem.Saturation</div>
                <div class="mb-1">Luminance: @fillCLRItem.Luminance</div>
            </MudItem>

            <MudItem xs="12" sm="6">
                <div class="mb-2">StrokeColor Values</div>
                <div class="mb-1">Hue: @StrokeCLRItem.Hue</div>
                <div class="mb-1">Saturation: @StrokeCLRItem.Saturation</div>
                <div class="mb-1">Luminance: @StrokeCLRItem.Luminance</div>
            </MudItem>

            <MudItem>
        <MudButton Color="Color.Secondary" Disabled="@_processing" @onclick="CreateCustomPicDataObject">Produce</MudButton>
        </MudItem>
        </MudGrid>

        <MudItem Style="nav-right">
                    <Download></Download>
                </MudItem>
    </MudContainer>
    
</MudPaper>

@code
{
    [Parameter]
    public PictureData CurrentPagePictureData { get; set; }

    public PictureData PicDataToCustomize = new();

    public BoxType PickedBox { get; set; }

    public List<string> InputText { get; set; }

    public BoxType MemeBox { get; set; }

    public List<string> AvailableFonts { get { return Directory.GetFiles("Fonts", "*.TTF*").ToList(); } }

    public string PickedFont
    {
        get
        {
            _PickedFont ??= CurrentPagePictureData.BoxParameters[0].Font;

            return _PickedFont;
        }
        set { _PickedFont = value; }
    }

    private string _PickedFont;

    [Parameter]
    public string ImageURL { get; set; }

    private bool _processing = false;

    private List<ColorGroup> colorBoxes = Enum.GetValues(typeof(ColorGroup)).Cast<ColorGroup>().ToList();

    private MudColor colorvalue;

    private ColorGroup PickedGroup;

    // get value from picker
    private MudColor BorderColor;
    // set value and display it
    private ColorItem BorderCLRItem;

    // get value from picker
    private MudColor FillColor;
    // set value and display it
    private ColorItem fillCLRItem;

    // get value from picker
    private MudColor StrokeColor;
    // set value and display it
    private ColorItem StrokeCLRItem;

    [Parameter]
    public Action<PictureData,string> OnCustomBoxHasProducedPicture { get; set; }

    private enum ColorGroup
    {
        FillColor,
        BorderColor,
        StrokeColor
    }

    private void SetColor(ColorGroup clrGRP)
    {
        if (clrGRP == ColorGroup.BorderColor)
        {
            BorderColor = colorvalue;
            BorderCLRItem.SetByHSL((float)BorderColor.H, (float)BorderColor.S, (float)BorderColor.L);
        }
        if (clrGRP == ColorGroup.FillColor)
        {
            FillColor = colorvalue;
            fillCLRItem.SetByHSL((float)FillColor.H, (float)FillColor.S, (float)FillColor.L);
        }
        if (clrGRP == ColorGroup.StrokeColor)
        {
            StrokeColor = colorvalue;
            StrokeCLRItem.SetByHSL((float)StrokeColor.H, (float)StrokeColor.S, (float)StrokeColor.L);
        }
        StateHasChanged();
    }

    private void DecideWhichBoxToEdit()
    {
        var boxToEdit = BoxParameters.Find(x => x.CurrentBox.Type == PickedBox);

        ConstructParameter(boxToEdit);

    }

    private void ConstructParameter(ParamForTextCreation paramIn)
    {
        Box liftBoxData = new();

        // this needs to happen because the PickedBox is an enum, and the boxdata is a class
        liftBoxData = CurrentPagePictureData.BoxParameters[0].Boxes.Find( x => x.Type == PickedBox);

        // makes sure that your boxdata object is correctly set
        paramIn.CurrentBox = liftBoxData;
        paramIn.Font = PickedFont;

        // construct color objects

        paramIn.BorderColor.SetByHSL(BorderCLRItem.Hue, BorderCLRItem.Saturation, BorderCLRItem.Luminance);
        paramIn.FillColor.SetByHSL(fillCLRItem.Hue, fillCLRItem.Saturation, fillCLRItem.Luminance);
        paramIn.StrokeColor.SetByHSL(StrokeCLRItem.Hue, StrokeCLRItem.Saturation, StrokeCLRItem.Luminance);

        // colors are set
    }

    List<ParamForTextCreation> BoxParameters = new();

    public async void CreateCustomPicDataObject()
    {
        // makes a copy of our current page picture data to avoid reference issues
        PictureData PicDataToCustomize = new(CurrentPagePictureData);

        /// these are our edited boxes that we will write to the picturedata object
        PicDataToCustomize.BoxParameters = BoxParameters;

        OutputType jobtype = OutputType.Custom;
        PicDataToCustomize = await PicDataService.CreateCustomPicDataObject(PicDataToCustomize, jobtype);
        // ShowCustomPicture(PicDataToCustomize);

        // get relative path of the outpath
        string currentDir = Directory.GetCurrentDirectory();
        string imgUrlRelative = Path.GetRelativePath(currentDir, PicDataToCustomize.OutPath);
        string addBackSlash = "/" + imgUrlRelative;
        string replacefrontslash = addBackSlash.Replace('\\', '/');

        ImageURL = replacefrontslash;
        StateHasChanged();
        OnCustomBoxHasProducedPicture?.Invoke(PicDataToCustomize,ImageURL);
    }

    private void BuildBoxParameters()
    {
        BoxParameters = new List<ParamForTextCreation>(CurrentPagePictureData.BoxParameters);
    }

    /// <summary>
    /// this isnt correct, this only displays one of the boxes
    /// </summary>
    protected override void OnInitialized()
    {
        foreach (var boxparam in CurrentPagePictureData.BoxParameters)
        {

            BorderCLRItem = boxparam.BorderColor;
            fillCLRItem = boxparam.FillColor;
            StrokeCLRItem = boxparam.StrokeColor;
        }

        BuildBoxParameters();
    }
}
