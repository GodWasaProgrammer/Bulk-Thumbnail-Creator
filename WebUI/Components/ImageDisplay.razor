@using BulkThumbnailCreator;
@using BulkThumbnailCreator.PictureClasses
@using BulkThumbnailCreator.Services
@using BulkThumbnailCreator.Enums

@inject CreatorService PicDataService;
@inject JobService JobService;
@inject Settings settings;
@inject AuthenticationStateProvider AuthProvider;

<div class="image-container">
    @if (IMGDetailClicked == false && imageUrls != null)
    {
        <div class="image-grid">
            @for (int i = 0; i < imageUrls.Count; i++)
            {
                var index = i;

                <img class="image-button" src="@imageUrls[index]" @onclick="(() => ShowImageDetail(imageUrls[index]))" />
                @if ((i + 1) % 3 == 0)
                {
                    <div style="flex-basis: 100%; height: 0;"></div>
                }
            }
        </div>

        <div class="centered-text">
            <MudText>Pick an image to receive more varieties</MudText>
            <div class="button-container">
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" ButtonType="ButtonType.Reset" OnClick="JobService.ResetState">Restart</MudButton>
            </div>
        </div>
    }
    else
    {
        <VarietyDisplay CurrentJob="CurrentJob" ParentPictureProp="picdata" VarietyUrls="VarietyUrls"></VarietyDisplay>
    }
</div>

@code
{
    [Parameter]
    public Job CurrentJob { get; set; }

    private string CurrentUser;

    private List<string> imageUrls;

    private List<string> VarietyUrls;

    private PictureData picdata = new();

    private bool IMGDetailClicked = false;

    private void reset()
    {
        CurrentJob = null;
        picdata = null;
        imageUrls = null;
        VarietyUrls = null;
        IMGDetailClicked = false;
        InvokeAsync(() => StateHasChanged());
    }

    // Load image URLs in the OnInitializedAsync lifecycle method
    // decide which state the current job is in and load the appropriate image urls
    protected override async Task OnInitializedAsync()
    {
        JobService.RegisterResetMethod(reset);

        var AuthState = await AuthProvider.GetAuthenticationStateAsync();

        CurrentUser = AuthState.User.Identity.Name;

        if (CurrentJob != null)
        {
            // // set the service list
            // PicDataService.PicDataServiceList = CurrentJob.PictureData;

            if (CurrentJob.State == States.FrontPagePictureLineUp)
            {
                imageUrls = CurrentJob.FrontLineUpUrls;
            }
            if (CurrentJob.State == States.varietyList)
            {
                picdata = await PicDataService.SetPictureDataImageDisplayCorrelation(CurrentJob.ClickedImage, CurrentJob);
                VarietyUrls = CurrentJob.VarietyUrls;
            }
            if (CurrentJob.State == States.CustomPicture)
            {
                IMGDetailClicked = true;
                picdata = PicDataService.SetPictureDataImageDisplayCorrelationForVarietyList(CurrentJob.ClickedImage, CurrentJob);
                VarietyUrls = CurrentJob.VarietyUrls;
            }

        }
        else
        {
            CurrentJob = await JobService.RequestCurrentJob(CurrentUser);

            if (CurrentJob != null)
            {
                if (CurrentJob.State == States.FrontPagePictureLineUp)
                {
                    imageUrls = CurrentJob.FrontLineUpUrls;
                    StateHasChanged();
                }
                if (CurrentJob.State == States.varietyList)
                {
                    VarietyUrls = CurrentJob.VarietyUrls;
                    StateHasChanged();
                }
            }
        }
        await InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Builds Directory List of the produced images
    /// </summary>
    /// <returns></returns>
    public async Task UpdateImageUrls(Settings settings)
    {
        var AuthState = await AuthProvider.GetAuthenticationStateAsync();

        CurrentUser = AuthState.User.Identity.Name;

        CurrentJob = await JobService.RequestCurrentJob(CurrentUser);

        string imagePath = settings.TextAddedDir;

        // Get the list of image files in the folder asynchronously
        string[] imageFiles = await Task.Run(() => Directory.GetFiles(imagePath, "*.png"));

        // Initialize the image URLs list
        imageUrls = new List<string>();

        // Create the URLs for the images and add them to the list
        foreach (string imageFile in imageFiles)
        {
            string imageUrl = $"/{imageFile}";
            imageUrls.Add(imageUrl);
        }

        // write the url list to the currentjob
        CurrentJob.FrontLineUpUrls = imageUrls;

        UserStateService.UpdateJob(CurrentJob);

        // Update the UI
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task ShowImageDetail(string imageToDisplayVarietyOf)
    {
        IMGDetailClicked = true;

        await InvokeAsync(() => StateHasChanged());

        picdata = await PicDataService.SetPictureDataImageDisplayCorrelation(imageToDisplayVarietyOf, CurrentJob);


        // crashes on refresh

        VarietyUrls = await PicDataService.CreatePictureDataVariety(picdata, settings, CurrentJob);
        CurrentJob.VarietyUrls = VarietyUrls;
        CurrentJob.ClickedImage = imageToDisplayVarietyOf;
        UserStateService.UpdateJob(CurrentJob);
    }
}

<style>
    .image-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

        .image-container img {
            max-width: calc(30% - 50px); /* Set the width for each image in the row */
            margin: 10px;
        }

    .image-grid {
        display: flex;
        flex-wrap: wrap;
        justify-content: center; /* Center-align the images horizontally */
    }

    .image-button {
        /* Add any additional styling for the images as needed */
        margin: 5px; /* Add some margin between images */
    }

    .centered-text {
        text-align: center; /* Center-align text horizontally */
    }

    .button-container {
        display: flex;
        justify-content: center; /* Center-align button horizontally */
        margin-top: 10px; /* Add margin space between text and button */
    }
</style>