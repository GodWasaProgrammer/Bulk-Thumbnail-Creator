@using BulkThumbnailCreator;
@using BulkThumbnailCreator.PictureClasses
@using BulkThumbnailCreator.Services
@using BulkThumbnailCreator.Enums

@inject Creator creator
@inject JobService JService;
@inject Settings settings;
@inject AuthenticationStateProvider AuthProvider;

<div class="image-container">
    @if (CurrentJob is not null)
    {
        @if (CurrentJob.State is not States.Loading)
        {
            @if (IMGDetailClicked == false && CurrentJob.FrontLineUpUrls != null)
            {
                <div class="image-grid">
                    @for (int i = 0; i < CurrentJob.FrontLineUpUrls.Count; i++)
                    {
                        var index = i;

                        <img class="image-button" src="@CurrentJob.FrontLineUpUrls[index]" @onclick="(() => ShowImageDetail(CurrentJob.FrontLineUpUrls[index]))" />
                        @if ((i + 1) % 3 == 0)
                        {
                            <div style="flex-basis: 100%; height: 0;"></div>
                        }
                    }
                </div>

                <div class="centered-text">
                    <MudText>Pick an image to receive more varieties</MudText>
                    <div class="button-container">
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" ButtonType="ButtonType.Reset" OnClick="JService.ResetState">Restart</MudButton>
                    </div>
                </div>
            }
            @if (IMGDetailClicked)
            {
                <VarietyDisplay ParentPicturePropChanged="UpdatePicData" picDataBoxURLChanged="UpdatePicDataBoxURL" PicDataBoxURL="@passUrl" CurrentJob="@CurrentJob" ParentPictureProp="@picdata" VarietyUrls="@CurrentJob.VarietyUrls"></VarietyDisplay>
            }
        }
    }
</div>

@code
{
    [Parameter]
    public Job CurrentJob { get; set; }

    [Parameter]
    public string CurrentUser { get; set; }

    private PictureData picdata;

    private string passUrl;

    private bool IMGDetailClicked = false;

    void UpdatePicDataBoxURL(string newUrl)
    {
        passUrl = newUrl;
    }

    void UpdatePicData(PictureData picturedata)
    {
        picdata = picturedata;
    }

    private void reset()
    {
        CurrentJob = null;
        picdata = null;
        IMGDetailClicked = false;
        InvokeAsync(() => StateHasChanged());
    }

    public void OnStateChangedHandler(object sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    // Load image URLs in the OnInitializedAsync lifecycle method
    // decide which state the current job is in and load the appropriate image urls
    protected override async Task OnInitializedAsync()
    {
        JService.RegisterResetMethod(reset);

        var AuthState = await AuthProvider.GetAuthenticationStateAsync();

        if (CurrentUser is null)
        {
            CurrentUser = AuthState.User.Identity.Name;
        }

        if (CurrentJob is not null)
        {
            CurrentJob.StateChanged += OnStateChangedHandler;
            if (CurrentJob.State == States.FrontPagePictureLineUp)
            {

            }
            if (CurrentJob.State == States.varietyList)
            {
                picdata = Creator.FindPictureDataByImageUrl(CurrentJob.ClickedImage, CurrentJob);
                passUrl = CurrentJob.ClickedImage;
                IMGDetailClicked = true;
            }
            if (CurrentJob.State == States.CustomPicture)
            {
                IMGDetailClicked = true;
                picdata = Creator.FindPictureDataByImageUrl(CurrentJob.ClickedImage, CurrentJob);
            }

        }
        else
        {
            CurrentJob = await JService.RequestCurrentJob(CurrentUser);

            if (CurrentJob is not null)
            {
                CurrentJob.StateChanged += OnStateChangedHandler;
                if (CurrentJob.State == States.FrontPagePictureLineUp)
                {
                    StateHasChanged();
                }
                if (CurrentJob.State == States.varietyList)
                {
                    StateHasChanged();
                }
            }
        }
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task ShowImageDetail(string imageToDisplayVarietyOf)
    {
        IMGDetailClicked = true;
        passUrl = imageToDisplayVarietyOf;

        picdata = Creator.FindPictureDataByImageUrl(imageToDisplayVarietyOf, CurrentJob);
        await creator.VarietyLineup(CurrentJob, picdata);

        CurrentJob.ClickedImage = imageToDisplayVarietyOf;
        await InvokeAsync(() => StateHasChanged());
    }
}

<style>
    .image-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

        .image-container img {
            max-width: calc(30% - 50px); /* Set the width for each image in the row */
            margin: 10px;
        }

    .image-grid {
        display: flex;
        flex-wrap: wrap;
        justify-content: center; /* Center-align the images horizontally */
    }

    .image-button {
        /* Add any additional styling for the images as needed */
        margin: 5px; /* Add some margin between images */
    }

    .centered-text {
        text-align: center; /* Center-align text horizontally */
    }

    .button-container {
        display: flex;
        justify-content: center; /* Center-align button horizontally */
        margin-top: 10px; /* Add margin space between text and button */
    }
</style>