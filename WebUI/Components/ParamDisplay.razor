@using BulkThumbnailCreator.PictureClasses

@if (param != null && param.CurrentBox.Type != BulkThumbnailCreator.Enums.BoxType.None)
{
    <div style="display: flex; flex-wrap: wrap; gap: 16px; padding: 16px;">
        <MudCard Style="max-width: 400px; width: 100%;">
            <MudCardContent>
                <MudText Typo="Typo.h6">@param.CurrentBox.Type</MudText>
                @if (param.Meme != null)
                {
                    <MudText>**Meme:** @Path.GetFileNameWithoutExtension(param.Meme)</MudText>
                }
                <MudText>**Text:** @param.Text</MudText>
                <MudText>**Font:** @Path.GetFileNameWithoutExtension(param.Font)</MudText>
                <MudText>**FillColor:**</MudText>
                <div style="width: 20px; height: 20px; background-color: @HslToRgb(param.FillColor.Hue, param.FillColor.Saturation, param.FillColor.Luminance); border: 1px solid #000;"></div>
                <MudText>**StrokeColor:**</MudText>
                <div style="width: 20px; height: 20px; background-color: @HslToRgb(param.StrokeColor.Hue, param.StrokeColor.Saturation, param.StrokeColor.Luminance); border: 1px solid #000;"></div>
            </MudCardContent>
        </MudCard>
    </div>
}

@code
{
    [Parameter]
    public ParamForTextCreation param { get; set; }

    string HslToRgb(double h, double s, double l)
    {
        double r, g, b;

        if (s == 0)
        {
            r = g = b = l; // achromatic
        }
        else
        {
            double hue = h / 360.0;
            double q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            double p = 2 * l - q;
            r = HueToRgb(p, q, hue + 1.0 / 3);
            g = HueToRgb(p, q, hue);
            b = HueToRgb(p, q, hue - 1.0 / 3);
        }

        return $"rgb({(int)(r * 255)}, {(int)(g * 255)}, {(int)(b * 255)})";
    }

    double HueToRgb(double p, double q, double t)
    {
        if (t < 0) t += 1;
        if (t > 1) t -= 1;
        if (t < 1.0 / 6) return p + (q - p) * 6 * t;
        if (t < 1.0 / 2) return q;
        if (t < 2.0 / 3) return p + (q - p) * (2.0 / 3 - t) * 6;
        return p;
    }
}