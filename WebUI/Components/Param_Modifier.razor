@using BulkThumbnailCreator.PictureClasses
@using MudBlazor.Utilities

@if (param != null && param.CurrentBox.Type != BulkThumbnailCreator.Enums.BoxType.None)
{
    <div style="overflow-x: auto; overflow-y: auto; max-height: 200px;">
        <Row>
            <MudTh>
                <Row>
                    <MudTh>Box</MudTh>
                    @if (param.Meme != null)
                    {
                        <MudTh>Meme</MudTh>
                    }
                    <MudTh>Text</MudTh>
                    <MudTh>Font</MudTh>
                    <MudTh>FillColor</MudTh>
                    <MudTh>StrokeColor</MudTh>
                </Row>
                <MudTd DataLabel="Box">@param.CurrentBox.Type</MudTd>
                @if (param.Meme != null)
                {
                    <MudTd DataLabel="Meme">@Path.GetFileNameWithoutExtension(param.Meme)</MudTd>
                }
                <MudButton OnClick="OpenTextDialog">
                    <MudTd DataLabel="Text">@param.Text</MudTd>
                </MudButton>

                <MudTd DataLabel="Font">
                    <MudButton Style="color: white; width: 25px; height: 25px;" OnClick="() => OpenFontDialog(param.Font)">
                        @Path.GetFileNameWithoutExtension(param.Font)
                    </MudButton>
                </MudTd>
                <MudTd DataLabel="FillColor">
                    <MudButton OnClick="() => OpenColorDialog(param.FillColor)">
                        <div style="width: 20px; height: 20px; background-color: @HslToRgb(param.FillColor.Hue, param.FillColor.Saturation, param.FillColor.Luminance);"></div>
                    </MudButton>
                </MudTd>
                <MudTd DataLabel="StrokeColor">
                    <MudButton OnClick="() => OpenColorDialog(param.StrokeColor)">
                        <div style="width: 20px; height: 20px; background-color: @HslToRgb(param.StrokeColor.Hue, param.StrokeColor.Saturation, param.StrokeColor.Luminance);"></div>
                    </MudButton>
                </MudTd>
            </MudTh>
        </Row>
    </div>
}

@code
{
    [Parameter]
    public ParamForTextCreation param { get; set; }
    [Inject]
    IDialogService DialogService { get; set; }

    private async Task OpenFontDialog(string font)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters { { "CurrentFont", $"{font}" } };
        var dialog = DialogService.Show<FontDialog>("Select Font", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            param.Font = (string)result.Data;
            StateHasChanged();
        }
    }

    private async Task OpenTextDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters { { "CurrentText", param.Text } };
        var dialog = DialogService.Show<TextDialog>("Select Text To Print",parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            param.Text = (string)result.Data;
            StateHasChanged();
        }
    }

    private async Task OpenColorDialog(ColorItem Color)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        string passColor = "";

        // decide which color we need to pass to the dialog
        if (Color == param.FillColor)
        {
            passColor = RgbToHex(param.FillColor.Red, param.FillColor.Green, param.FillColor.Blue);
        }
        if (Color == param.StrokeColor)
        {
            passColor = RgbToHex(param.StrokeColor.Red, param.StrokeColor.Green, param.StrokeColor.Blue);
        }

        // set ut parameter to pass
        var parameters = new DialogParameters
        {
            {"InitialColor", $"{passColor}"}
        };

        // invoke the dialog
        var dialog = DialogService.Show<ColorDialog>("Select Color", parameters, options);
        var result = await dialog.Result;


        if (!result.Canceled)
        {
            var selectedColor = (MudColor)result.Data;
            if (Color == param.FillColor)
            {
                param.FillColor.SetByHSL((float)selectedColor.H, (float)selectedColor.S, (float)selectedColor.L);
            }
            if (Color == param.StrokeColor)
            {
                param.StrokeColor.SetByHSL((float)selectedColor.H, (float)selectedColor.S, (float)selectedColor.L);
            }
            StateHasChanged();
        }
    }

    string HslToRgb(double h, double s, double l)
    {
        double r, g, b;

        if (s == 0)
        {
            r = g = b = l; // achromatic
        }
        else
        {
            double hue = h / 360.0;
            double q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            double p = 2 * l - q;
            r = HueToRgb(p, q, hue + 1.0 / 3);
            g = HueToRgb(p, q, hue);
            b = HueToRgb(p, q, hue - 1.0 / 3);
        }

        return $"rgb({(int)(r * 255)}, {(int)(g * 255)}, {(int)(b * 255)})";
    }

    private static string RgbToHex(int r, int g, int b)
    {
        return $"#{r:X2}{g:X2}{b:X2}";
    }

    double HueToRgb(double p, double q, double t)
    {
        if (t < 0) t += 1;
        if (t > 1) t -= 1;
        if (t < 1.0 / 6) return p + (q - p) * 6 * t;
        if (t < 1.0 / 2) return q;
        if (t < 2.0 / 3) return p + (q - p) * (2.0 / 3 - t) * 6;
        return p;
    }
}