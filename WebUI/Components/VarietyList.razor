@using BulkThumbnailCreator
@using BulkThumbnailCreator.Services
@using BulkThumbnailCreator.PictureClasses
@inject CreatorService PicDataService
@inject JobService js
@inject Settings settings
@inject AuthenticationStateProvider AuthProvider

@if (!view)
{
    <div style="display: flex; justify-content: center;">
        <MudButton Variant="Variant.Filled" OnClick="GoBack" Color="Color.Secondary">Back</MudButton>
    </div>
    <MudDataGrid Items="@ListOfPicData">
        <Columns>
            <PropertyColumn Property="x => x.FileName" Title="">
                <CellTemplate>
                    <MudImage Width="100" Src="@MatchUrl(context.Item.FileName)"></MudImage>
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.OutPutType" Title="Type" />
            <PropertyColumn Property=@( x => Path.GetFileNameWithoutExtension(x.FileName)) />
            <PropertyColumn Property="x => x.BoxParameters.Count" Title="Parameters">
                <CellTemplate>
                    <MudButton OnClick="() => ViewParameters(context.Item, context.Item.FileName)" Variant="Variant.Filled" Color="Color.Tertiary">View</MudButton>
                </CellTemplate>
            </PropertyColumn>

        </Columns>
    </MudDataGrid>
    <div style="display: flex; justify-content: center;">
        <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Reset" OnClick="GoBack" Color="Color.Secondary">Back</MudButton>
    </div>
}
@if (viewParameter)
{
    <PictureDataBox ImageURL="@urlPass" PicData="picDataPass" GoBack="CloseParameters"></PictureDataBox>
}
@code
{
    [Parameter]
    public int indexOfPicData { get; set; }
    [Parameter]
    public Action GoBack { get; set; }

    bool view;

    public Job currentJob;
    public string currentUser;
    List<PictureData> VarietyPictureDatas;
    IEnumerable<PictureData> ListOfPicData = new List<PictureData>();
    List<string> imageUrls = new List<string>();

    public string MatchUrl(string picture)
    {
        foreach (string url in imageUrls)
        {
            string PicDataFileName = Path.GetFileNameWithoutExtension(picture);
            string IterationUrl = Path.GetFileNameWithoutExtension(url);

            if (IterationUrl.EndsWith(PicDataFileName))
            {
                return url;
            }
        }
        return null;
    }


    public void CloseParameters()
    {
        view = false;
        viewParameter = false;
    }

    PictureData picDataPass;
    string urlPass;
    bool viewParameter;
    public void ViewParameters(PictureData p, string url)
    {
        view = true;
        this.urlPass = MatchUrl(url);
        picDataPass = p;
        if (!viewParameter)
        { viewParameter = true; }
        StateHasChanged();
    }

    public async void SetUrls()
    {
        string imagePath = settings.TextAddedDir;

        // Get the list of image files in the folder asynchronously
        string[] imageFiles = await Task.Run(() => Directory.GetFiles(imagePath, "*.png"));

        // Initialize the image URLs list
        imageUrls = new List<string>();

        // Create the URLs for the images and add them to the list
        foreach (string imageFile in imageFiles)
        {
            string imageUrl = $"/{imageFile}";
            imageUrls.Add(imageUrl);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var AuthState = await AuthProvider.GetAuthenticationStateAsync();

        currentUser = AuthState.User.Identity.Name;

        if (currentJob == null)
        {
            currentJob = await js.RequestCurrentJob(currentUser);
        }
        await InvokeAsync(() => StateHasChanged());

        if (currentJob is not null)
        {
            VarietyPictureDatas = currentJob.PictureData[indexOfPicData].Varieties;
        }
    }

    protected override Task OnParametersSetAsync()
    {
        SetUrls();
        ListOfPicData = VarietyPictureDatas;
        StateHasChanged();
        return base.OnParametersSetAsync();
    }
}