@using BulkThumbnailCreator
@using BulkThumbnailCreator.Services
@using BulkThumbnailCreator.PictureClasses
@inject PicDataService PicDataService
@inject JobService js;
@inject Settings settings;
@inject AuthenticationStateProvider AuthProvider;

<MudButton Variant="Variant.Filled" OnClick="GoBack" Color="Color.Secondary">Back</MudButton>
<MudDataGrid Items="@ListOfPicData">
    <Columns>
        <PropertyColumn Property="x => x.OutPutType" Title="Type" />
        <PropertyColumn Property=@( x => Path.GetFileNameWithoutExtension(x.FileName))/>
        <PropertyColumn Property="x => x.BoxParameters.Count" Title="Parameters"/>
    </Columns>
</MudDataGrid>
<MudButton Variant="Variant.Filled" ButtonType="ButtonType.Reset"   OnClick="GoBack" Color="Color.Secondary">Back</MudButton>
@code
{
    [Parameter]
    public int indexOfPicData { get; set; }
    [Parameter]
    public Action GoBack { get; set; }

    public Job currentJob;
    public string currentUser;
    List<PictureData> VarietyPictureDatas;
    IEnumerable<PictureData> ListOfPicData = new List<PictureData>();

    protected override async Task OnInitializedAsync()
    {
        var AuthState = await AuthProvider.GetAuthenticationStateAsync();

        currentUser = AuthState.User.Identity.Name;

        if (currentJob == null)
        {
            currentJob = await js.RequestCurrentJob(currentUser);
        }
        await InvokeAsync(() => StateHasChanged());

        if (currentJob is not null)
        {
            VarietyPictureDatas = currentJob.PictureDatas[indexOfPicData].Varieties;
        }
    }

    protected override Task OnParametersSetAsync()
    {
        ListOfPicData = VarietyPictureDatas;
        StateHasChanged();
        return base.OnParametersSetAsync();
    }
}