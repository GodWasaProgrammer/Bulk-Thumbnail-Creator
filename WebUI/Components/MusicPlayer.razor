@inject IJSRuntime JS

<MudStack Spacing="1" Class="p-1">

    <MudPaper Class="d-flex justify-content-center align-items-center mb-2">
        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.SkipPrevious" OnClick="@(() => PreviousTrack())" Color="Color.Primary" />
        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.PlayArrow" OnClick="@(() => PlayTrack(currentTrackUrl))" Color="Color.Primary" />
        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.SkipNext" OnClick="@(() => NextTrack())" Color="Color.Primary" />
        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Stop" OnClick="@(() => StopTrack())" Color="Color.Primary" />
    </MudPaper>

    <MudPaper Class="d-flex align-items-center mb-2">
        <MudSlider Min="0" Max="100" Step="1" Value="Volume" OnChange="@(() => VolumeChanged)" Color="Color.Secondary" Class="flex-grow-1" />
        <MudIcon Icon="@Icons.Material.Filled.VolumeUp" Class="ml-2" />
    </MudPaper>

    <MudPaper Class="overflow-auto" Style="max-height: 300px;">
        <MudList T="string" Dense="true">
            @foreach (var track in Tracks)
            {
                <MudListItem OnClick="@(() => PlayTrack(track.Url))" Selected="@track.IsPlaying">
                    @track.Name
                </MudListItem>
            }
        </MudList>
    </MudPaper>
</MudStack>

@code {
    List<Track> Tracks = new List<Track>();

    private int Volume = 50;
    private bool IsPlaying;
    private string currentTrackUrl = "";

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        currentTrackUrl = Tracks[0].Url;
        if(firstRender)
        {
            
        await JS.InvokeVoidAsync("audioPlayer.initialize", "audioPlayer");
        }
    }

    protected override void OnInitialized()
    {
        var Files = Directory.GetFiles("wwwroot/Media");

        foreach (var file in Files)
        {
            var name = Path.GetFileNameWithoutExtension(file);
            string correctedUrl = $"/Media/{Path.GetFileName(file)}";
            var addTrack = new Track { Name = name, Url = correctedUrl, IsPlaying = false };
            Tracks.Add(addTrack);
        }
        
    }

    private async Task PlayTrack(string url)
    {
        currentTrackUrl = url;
        await JS.InvokeVoidAsync("audioPlayer.next", url);
    }

    private async Task StopTrack()
    {
        await JS.InvokeVoidAsync("audioPlayer.stop");
    }

    private async Task NextTrack()
    {
        // Logik för att hitta nästa spår
        string nextTrackUrl = "your-next-track.mp3";
        await JS.InvokeVoidAsync("audioPlayer.next", nextTrackUrl);
    }

    private async Task PreviousTrack()
    {
        // Logik för att hitta föregående spår
        string previousTrackUrl = "your-previous-track.mp3";
        await JS.InvokeVoidAsync("audioPlayer.previous", previousTrackUrl);
    }

    private async Task PlayPauseTrack()
    {
        if (IsPlaying)
        {
            await JS.InvokeVoidAsync("audioPlayer.pause");
            IsPlaying = false;
        }
        else
        {
            await JS.InvokeVoidAsync("audioPlayer.play");
            IsPlaying = true;
        }
    }

    private async Task VolumeChanged(double value)
    {
        Volume = (int)value;
        await JS.InvokeVoidAsync("audioPlayer.setVolume", Volume);
    }


    public class Track
    {
        public string Name { get; set; }
        public string Url { get; set; }
        public bool IsPlaying { get; set; }
    }
}