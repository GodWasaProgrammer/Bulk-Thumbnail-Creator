@namespace WebUI.Components

@using MudBlazor.Utilities
@inject IDialogService DialogService

<MudGrid>
    <MudItem>
        <MudTextField @bind-Value="_inputText" T="string">Insert Text</MudTextField>
        <MudButton OnClick="AddText">Submit</MudButton>
    </MudItem>
</MudGrid>

<MudSelect Variant="Variant.Text" AdornmentColor="Color.Primary" Label="Select text" @bind-Value="_pickedText">
    @foreach (var fontPath in Texts)
    {
        var fontFileName = Path.GetFileNameWithoutExtension(fontPath);
        <MudSelectItem Value="@fontPath" Style="@(($"font-family: '{fontFileName}';"))"><MudText Color="Color.Secondary">@fontFileName</MudText></MudSelectItem>
    }
</MudSelect>


<MudButton Color="Color.Success" OnClick="ConfirmSelection">OK</MudButton>
<MudButton Color="Color.Error" OnClick="CloseDialog">Cancel</MudButton>
@code
{
    private List<string> Texts = new();
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public string CurrentText { get; set; }

    private string _pickedText;
    private string _inputText;

    private void AddText()
    {
        if (!Texts.Contains(_inputText))
        {
            Texts.Add(_inputText);
            StateHasChanged();
        }
    }

    protected override void OnParametersSet()
    {
        if(!Texts.Contains(CurrentText))
        {
            Texts.Add(CurrentText);
        }
    }

    private void CloseDialog()
    {
        MudDialog.Cancel();
    }

    private void ConfirmSelection()
    {
        MudDialog.Close(DialogResult.Ok(_pickedText));
    }

    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<ColorDialog>("Text Picker", options);
    }
}
