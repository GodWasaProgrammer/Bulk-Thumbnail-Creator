@using BulkThumbnailCreator.Enums
@using BulkThumbnailCreator.PictureClasses
@using MudBlazor.Utilities

@if (param != null)
{
    <MudGrid>
        <MudItem>
        <MudItem>
                        <MudPaper Outlined="true" Elevation="2" Class="pa-4">

        <MudSelect AdornmentColor="Color.Primary" Label="Box To Edit" @bind-Value="PickedBox">

            @foreach (var box in pictureData.BoxParameters)
            {
                <MudSelectItem Value="@box.CurrentBox.Type">@box.CurrentBox.Type</MudSelectItem>
            }

        </MudSelect>
        </MudPaper>
        </MudItem>
            @if(!param.MemeBool)
            {
                
            <MudPaper Outlined="true" Elevation="2" Class="pa-4">
                <MudTextField Label="Enter Text here" Variant="Variant.Filled" @bind-Value="_userText" />
                <MudButton Variant="Variant.Filled" Color="Color.Success" ButtonType="ButtonType.Submit" OnClick="ChangeText">Change Text</MudButton>
            <MudItem>
               <MudButton Color="Color.Primary" Variant="Variant.Filled" Style="color: white; width: auto; height: auto;" OnClick="() => OpenFontDialog(param.Font)">
                    <MudText>Font:</MudText>
                    @Path.GetFileNameWithoutExtension(param.Font)
                </MudButton>
            </MudItem>                
                </MudPaper>

                <MudItem>
                    <MudPaper Outlined="true" Elevation="2" Class="pa-4">
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => OpenColorDialog(param.FillColor)">
                            <MudText>FillColor</MudText>
                            <div style="width: 20px; height: 20px; background-color: @HslToRgb(param.FillColor.Hue, param.FillColor.Saturation, param.FillColor.Luminance);"></div>
                        </MudButton>

                        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => OpenColorDialog(param.StrokeColor)">
                            <MudText>StrokeColor</MudText>
                            <div style="width: 20px; height: 20px; background-color: @HslToRgb(param.StrokeColor.Hue, param.StrokeColor.Saturation, param.StrokeColor.Luminance);"></div>
                        </MudButton>
                        
                    </MudPaper>
                    <MudItem>

                        <MudPaper Outlined="true" Elevation="2" Class="pa-4">
                            <MudCheckBox @bind-Value="param.Gradient">Gradient</MudCheckBox>
                            <MudCheckBox @bind-Value="param.Shadows">Shadows</MudCheckBox>
                        </MudPaper>

                    </MudItem>


                </MudItem>
            }
            <MudItem>

                <MudPaper Outlined="true" Elevation="2" Class="pa-4">
                    <MudCheckBox @bind-Value="param.MemeBool">Meme</MudCheckBox>
                    @if (param.MemeBool)
                    {
                        <MudButton OnClick="MemeDialog">
                            <MudText>Select Meme</MudText>
                        </MudButton>
                    }
                </MudPaper>
            <MudItem>
                <MudPaper Outlined="true" Elevation="2" Class="pa-4">

            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="BoxChangeDialog">Change Box</MudButton>
            </MudPaper>
            </MudItem>

            </MudItem>
            </MudItem>


    </MudGrid>
}

@code
{
    private BoxType _pickedBox;
    BoxType PickedBox
    {
        get { return _pickedBox; }
        set
        {
            _pickedBox = value;
            param = pictureData.BoxParameters.Find(x => x.CurrentBox.Type == value);
            _userText = param.Text;
            StateHasChanged();
        }
    }

    private ParamForTextCreation param { get; set; }

    [Parameter]
    public PictureData pictureData { get; set; }

    [Inject]
    IDialogService DialogService { get; set; }
    string _userText;

    protected override void OnParametersSet()
    {
        if (param is null && pictureData.BoxParameters.Any())
        {
            param = pictureData.BoxParameters[0];
            PickedBox = param.CurrentBox.Type;
        }

        if (param is not null)
            _userText = param.Text;
    }

    private async Task BoxChangeDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters { { "picData", pictureData } };
        parameters.Add("ChosenBox", param.CurrentBox.Type);
        var dialog = DialogService.Show<BoxOverrideDialog>("Pick a box you want to replace, then pick box to replace with", parameters, options);
        var result = await dialog.Result;

        if(!result.Canceled)
        {
            param = pictureData.BoxParameters.Find(x => x.CurrentBox.Type == (BoxType)result.Data);
            PickedBox = param.CurrentBox.Type;
            StateHasChanged();
        }
    }

    private void ChangeText()
    {
        param.Text = _userText;
    }

    private async Task BoxChoiceDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters { { "picdata", pictureData } };
        var dialog = DialogService.Show<BoxPickDialog>("Select Box", parameters, options);
        var result = await dialog.Result;

        if(!result.Canceled)
        {
            param = pictureData.BoxParameters.Find(Box => Box.CurrentBox.Type == (BoxType)result.Data);
        }
    }

    private async Task MemeDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<MemeDialog>("Select Meme", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            param.Meme = (string)result.Data;
            param.MemeBool = true;
            pictureData.OutPutType = OutputType.MemeVariety;
            StateHasChanged();
        }
    }

    private async Task OpenFontDialog(string font)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters { { "CurrentFont", $"{font}" } };
        var dialog = DialogService.Show<FontDialog>("Select Font", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            param.Font = (string)result.Data;
            StateHasChanged();
        }
    }

    private async Task OpenTextDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters { { "CurrentText", param.Text } };
        var dialog = DialogService.Show<TextDialog>("Select Text To Print", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            param.Text = (string)result.Data;
            StateHasChanged();
        }
    }

    private async Task OpenColorDialog(ColorItem Color)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        string passColor = "";

        // decide which color we need to pass to the dialog
        if (Color == param.FillColor)
        {
            passColor = RgbToHex(param.FillColor.Red, param.FillColor.Green, param.FillColor.Blue);
        }
        if (Color == param.StrokeColor)
        {
            passColor = RgbToHex(param.StrokeColor.Red, param.StrokeColor.Green, param.StrokeColor.Blue);
        }

        // set ut parameter to pass
        var parameters = new DialogParameters
        {
            {"InitialColor", $"{passColor}"}
        };

        // invoke the dialog
        var dialog = DialogService.Show<ColorDialog>("Select Color", parameters, options);
        var result = await dialog.Result;


        if (!result.Canceled)
        {
            var selectedColor = (MudColor)result.Data;
            if (Color == param.FillColor)
            {
                param.FillColor.SetByHSL((float)selectedColor.H, (float)selectedColor.S, (float)selectedColor.L);
            }
            if (Color == param.StrokeColor)
            {
                param.StrokeColor.SetByHSL((float)selectedColor.H, (float)selectedColor.S, (float)selectedColor.L);
            }
            StateHasChanged();
        }
    }

    string HslToRgb(double h, double s, double l)
    {
        double r, g, b;

        if (s == 0)
        {
            r = g = b = l; // achromatic
        }
        else
        {
            double hue = h / 360.0;
            double q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            double p = 2 * l - q;
            r = HueToRgb(p, q, hue + 1.0 / 3);
            g = HueToRgb(p, q, hue);
            b = HueToRgb(p, q, hue - 1.0 / 3);
        }

        return $"rgb({(int)(r * 255)}, {(int)(g * 255)}, {(int)(b * 255)})";
    }

    private static string RgbToHex(int r, int g, int b)
    {
        return $"#{r:X2}{g:X2}{b:X2}";
    }

    double HueToRgb(double p, double q, double t)
    {
        if (t < 0) t += 1;
        if (t > 1) t -= 1;
        if (t < 1.0 / 6) return p + (q - p) * 6 * t;
        if (t < 1.0 / 2) return q;
        if (t < 2.0 / 3) return p + (q - p) * (2.0 / 3 - t) * 6;
        return p;
    }
}