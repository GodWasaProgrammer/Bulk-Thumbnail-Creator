@using BulkThumbnailCreator.Interfaces;
@using BulkThumbnailCreator;
@using BulkThumbnailCreator.Services;
@using BulkThumbnailCreator.Enums;
@using MudBlazor;

@inject ILogService Logger
@inject CreatorService PicDataService
@inject JobService JobService
@inject AuthenticationStateProvider AuthProvider

@if (processing)
{
    <MudPaper Elevation="2" Class="validation-message">
        <MudTimeline TimelinePosition="TimelinePosition.Left">
            @for (int i = LogEntries.TakeLast(takeEntries).Count() - 1; i >= 0; i--)
            {
                var entry = LogEntries.ElementAt(i);
                <MudTimelineItem Icon="@Icons.Material.Filled.Article" Variant="Variant.Filled" Color="Color.Success">
                    <div class="fit-container">
                        <div class="fit-content">
                            <MudAlert Severity="Severity.Success">@entry</MudAlert>
                        </div>
                        <div class="timestamp">
                            <MudAlert Severity="Severity.Normal">@DateTime.Now</MudAlert>
                        </div>
                    </div>
                </MudTimelineItem>
            }
        </MudTimeline>
    </MudPaper>
}

@code
{

    private bool IsInitialized { get; set; } = false;

    [Parameter]
    public Job CurrentJob { get; set; }

    private string CurrentUser;

    [Parameter]
    public int takeEntries { get; set; } = 10;

    [Parameter]
    public bool processing { get; set; }

    private List<string> LogEntries = new List<string>();

    private void JobStateHasChanged()
    {
        StateHasChanged();
    }

    private void OnLogEntryAdded(string logEntry)
    {
        // so its supposed to request a job if its null, otherwise it shouldnt disrupt anything
        if (CurrentJob == null)
        {
            CurrentJob = JobService.RequestCurrentJob(CurrentUser).Result;
        }
        // if however the job has now been created, we will copy the logentries to the job
        // this way we dont have to worry about the job being null before it passes the download stage
        if (CurrentJob != null)
            CurrentJob.LogEntries = LogEntries;
        takeEntries++;

        LogEntries.Add(logEntry);
        InvokeAsync(() => StateHasChanged());
    }

    private void ExpandLog()
    {
        if (takeEntries == int.MaxValue)
        {
            takeEntries = 1;
        }
        else
        {
            // Set TakeEntries to its maximum value when the loading component is clicked
            takeEntries = int.MaxValue;
        }
    }

    public void OnStateChangedHandler(object sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    protected override async Task OnInitializedAsync()
    {
        JobService.RegisterDelegateForJobChange(JobStateHasChanged);
        var AuthState = AuthProvider.GetAuthenticationStateAsync().Result;

        CurrentUser = AuthState.User.Identity.Name;

        if (CurrentJob is null)
        {
            CurrentJob = await JobService.RequestCurrentJob(CurrentUser);
        }

        if (CurrentJob is not null)
        {
            LogEntries = CurrentJob.LogEntries;
            CurrentJob.StateChanged += OnStateChangedHandler;

            if (CurrentJob.State != States.Initial)
            {
                Logger = CurrentJob.Settings.LogService;
            }
        }
        Logger.LogEntryAdded += OnLogEntryAdded;
        IsInitialized = true;
    }
}
<style>
    .fit-container {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
        padding: 25px;
    }

    .fit-content {
        width: fit-content;
        max-width: 100%;
        text-align: center;
        font-size: 1vw; /* Adjust the font size based on viewport width */
    }

    }

    .timestamp {
        margin-left: 10px;
        font-size: 0.8vw; /* Adjust as needed */
        color: gray; /* Adjust as needed */
    }
</style>