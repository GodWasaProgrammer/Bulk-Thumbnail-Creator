@using BulkThumbnailCreator.Interfaces;
@using BulkThumbnailCreator;
@using BulkThumbnailCreator.Services;
@using BulkThumbnailCreator.Enums;
@using MudBlazor;
@using System.Text.RegularExpressions

@inject ILogService Logger
@inject JobService JobService
@inject AuthenticationStateProvider AuthProvider

@if (processing)
{
    <MudProgressLinear Striped="true" Buffer="true" BufferValue="BufferValue" Size="Size.Medium" Color="Color.Warning" Value="@Value" Class="my-7" />
    @for (int i = LogEntries.TakeLast(takeEntries).Count() - 1; i >= 0; i--)
    {
        var entry = LogEntries.ElementAt(i);
        <MudAlert Dense="true" Severity="Severity.Success">@entry</MudAlert>
    }
}

@code
{
    private bool IsInitialized { get; set; } = false;

    [Parameter]
    public Job CurrentJob { get; set; }

    [Parameter]
    public string CurrentUser { get; set; }

    [Parameter]
    public int takeEntries { get; set; } = 10;

    [Parameter]
    public bool processing { get; set; }

    private List<string> LogEntries = new List<string>();

    private void JobStateHasChanged()
    {
        StateHasChanged();
    }

    // value of progress bar
    private double Value { get; set; } = 10;

    // Buffer
    private double BufferValue = 15;

    // number of images being processed
    private double _numberOfImages;

    // number of created files
    private int _createdFilesCount = 0;

    private void OnLogEntryAdded(string logEntry)
    {
        // so its supposed to request a job if its null, otherwise it shouldnt disrupt anything
        if (CurrentJob == null)
        {
            CurrentJob = JobService.RequestCurrentJob(CurrentUser).Result;
        }
        // if however the job has now been created, we will copy the logentries to the job
        // this way we dont have to worry about the job being null before it passes the download stage
        if (CurrentJob != null)
            CurrentJob.LogEntries = LogEntries;
        takeEntries++;

        LogEntries.Add(logEntry);
        if (logEntry.Contains("Windows OS Detected"))
        {
            Value += 2.5;
            BufferValue += 2.5;
        }
        if (logEntry.Contains("YTDLP has been confirmed"))
        {
            Value += 2.5;
            BufferValue += 2.5;
        }
        if (logEntry.Contains("FFmpeg Has been confirmed"))
        {
            Value += 2.5;
            BufferValue += 2.5;
        }
        if (logEntry.Contains("YTDL has been confirmed"))
        {
            Value += 2.5;
            BufferValue += 2.5;
        }
        if (logEntry.Contains("Attempting download of:"))
        {
            Value += 10;
            BufferValue += 10;
        }
        if (logEntry.Contains("Download Success:True"))
        {
            Value += 30;
            BufferValue += 30;
        }
        if (logEntry.Contains("FFMpeg started"))
        {
            Value += 5;
            BufferValue += 5;
        }
        if (logEntry.Contains("Ffmpeg finished producing pictures"))
        {
            Value += 5;
            BufferValue += 5;
        }
        if (logEntry.Contains("Processing"))
        {
            // Regex to find the number in the string
            Regex regex = new Regex(@"\d+");
            Match match = regex.Match(logEntry);

            if (match.Success)
            {
                // lift number of processed image from string using regex
                var number = double.Parse(match.Value);
                _numberOfImages = number;
            }

            Value += 5;
            BufferValue += 5;
        }

        if (logEntry.Contains("composited"))
        {
            if (_numberOfImages is not 0)
            {
                if (BufferValue > 10)
                {
                    double valueOfProcess = 15;
                    double PresumedAmountOfBoxes = _numberOfImages * 2;
                    double valueToAdd = valueOfProcess / PresumedAmountOfBoxes;
                    Value += valueToAdd;
                    BufferValue += valueToAdd;
                }
            }
            else
            {
                double valueOfProcess = 50;
                double PresumedAmountOfBoxes = 6 * 2;
                double valueToAdd = valueOfProcess / PresumedAmountOfBoxes;
                Value += valueToAdd;
                BufferValue += valueToAdd;
            }
        }
        if (logEntry.Contains("File Created"))
        {
            if (_numberOfImages is not 0)
            {
                _createdFilesCount++;
                double valueOfProcess = 15;
                double valueToAdd = valueOfProcess / _numberOfImages;
                Value += valueToAdd;
                BufferValue += valueToAdd;
            }
            else
            {
                double valueOfProcess = 15;
                double valueToAdd = valueOfProcess / 6;
                Value += valueToAdd;
                BufferValue += valueToAdd;
            }
        }

        if (logEntry.Contains("Processing Finished"))
        {
            if (Value is < 100)
            {
                Value = 100;
                BufferValue = 10;
            }
        }

        InvokeAsync(() => StateHasChanged());
        if (Value > 100 || Value == 100)
        {
            if (logEntry.Contains("Processing Finished"))
                Value = 10; BufferValue = 15;
        }
    }

    private void ExpandLog()
    {
        if (takeEntries == int.MaxValue)
        {
            takeEntries = 1;
        }
        else
        {
            // Set TakeEntries to its maximum value when the loading component is clicked
            takeEntries = int.MaxValue;
        }
    }

    public void OnStateChangedHandler(object sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    protected override async Task OnInitializedAsync()
    {
        JobService.RegisterDelegateForJobChange(JobStateHasChanged);

        if (CurrentUser is null)
        {
            var AuthState = AuthProvider.GetAuthenticationStateAsync().Result;
            CurrentUser = AuthState.User.Identity.Name;
        }


        if (CurrentJob is null)
        {
            CurrentJob = await JobService.RequestCurrentJob(CurrentUser);
        }

        if (CurrentJob is not null)
        {
            LogEntries = CurrentJob.LogEntries;
            CurrentJob.StateChanged += OnStateChangedHandler;

            if (CurrentJob.State != States.Initial)
            {
                // Logger = CurrentJob.Settings.LogService;
            }
        }
        Logger.LogEntryAdded += OnLogEntryAdded;
        IsInitialized = true;
    }
}
