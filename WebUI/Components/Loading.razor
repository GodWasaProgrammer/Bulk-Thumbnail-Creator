@using Bulk_Thumbnail_Creator.Interfaces;
@using Bulk_Thumbnail_Creator;
@using Bulk_Thumbnail_Creator.Services;

@inject ILogService Logger
@inject PicDataService PicDataService
@inject JobService JobService
@inject AuthenticationStateProvider AuthProvider    

@if (processing)
{
    <MudContainer @onclick="ExpandLog">
        <MudPaper Elevation="4" Class="small">
            @foreach (var entry in LogEntries.TakeLast(takeEntries))
            {
                <MudTextField AdornmentIcon="" Label="Log Entry" Multiline="true" Variant="Variant.Filled" FullWidth="true" ReadOnly="true" Value="@entry" />
            }
        </MudPaper>
    </MudContainer>
}

@code {
    private bool IsInitialized { get; set; } = false;

    [Parameter]
    public Job CurrentJob { get; set; }

    private string CurrentUser;

    [Parameter]
    public int takeEntries { get; set; } = 1;

    [Parameter]
    public bool processing { get; set; }

    private List<string> LogEntries = new List<string>();

    protected override void OnInitialized()
    {
        Logger.LogEntryAdded += OnLogEntryAdded;
        IsInitialized = true;
    }

    private void OnLogEntryAdded(string logEntry)
    {
        var AuthState = AuthProvider.GetAuthenticationStateAsync().Result;

        CurrentUser = AuthState.User.Identity.Name;

        // so its supposed to request a job if its null, otherwise it shouldnt disrupt anything
        if (CurrentJob == null)
        {
            CurrentJob = JobService.RequestCurrentJob(CurrentUser).Result;
        }
        // if however the job has now been created, we will copy the logentries to the job
        // this way we dont have to worry about the job being null before it passes the download stage
        if (CurrentJob != null)
            CurrentJob.LogEntries = LogEntries;

        LogEntries.Add(logEntry);
        InvokeAsync(() => StateHasChanged());
    }

    private void ExpandLog()
    {
        if (takeEntries == int.MaxValue)
        {
            takeEntries = 1;
        }
        else
        {
            // Set TakeEntries to its maximum value when the loading component is clicked
            takeEntries = int.MaxValue;
        }

    }

    protected override async Task OnInitializedAsync()
    {
        var AuthState = AuthProvider.GetAuthenticationStateAsync().Result;

        CurrentUser = AuthState.User.Identity.Name;

        if (CurrentJob == null)
        {
            CurrentJob = await JobService.RequestCurrentJob(CurrentUser);
        }

        if (CurrentJob != null)
        {
            LogEntries = CurrentJob.LogEntries;
        }

    }

}
