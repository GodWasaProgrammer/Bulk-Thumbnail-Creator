@using BulkThumbnailCreator.PictureClasses
@using BulkThumbnailCreator.Services;
@inject NavigationManager Navigation;
@inject IJSRuntime JavaScript;
@inherits ComponentBase

@if (GoBack != null)
{
    <div style="display: flex; justify-content: center;">
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="GoBack">Back</MudButton>
    </div>
}

    <MudContainer>

        <MudItem>
            @if (ImageURL != null)
            {
                <div style="cursor: pointer;" @onclick="() => OpenImageInNewTab(ImageURL) ">
                    <MudImage Fluid="true" Src="@ImageURL" />
                </div>
            }
        </MudItem>


<div style="display: flex; justify-content: center;">
    <MudButton OnClick="DisplayValues" Color="Color.Secondary" Variant="Variant.Outlined">Display Values</MudButton>
</div>
        <MudGrid>
            @if (_displayValues)
            {
                @if (PicData != null)
                {
                    @foreach (ParamForTextCreation boxParam in PicData.BoxParameters)
                    {
                        <ParamDisplay param="boxParam"></ParamDisplay>
                    }
                }
            }

        </MudGrid>

    </MudContainer>


@if (GoBack != null)
{
    <div style="display: flex; justify-content: center;">
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="GoBack">Back</MudButton>
    </div>
}

@code
{
    private bool _displayValues;

    void DisplayValues()
    {
        _displayValues = !_displayValues;
    }

    [Parameter]
    public string ImageURL { get; set; }

    [Parameter]
    public PictureData PicData { get; set; }

    [Parameter]
    public Action GoBack { get; set; }

    private async Task OpenImageInNewTab(string imageUrl)
    {
        await JavaScript.InvokeVoidAsync("open", ImageURL, "_blank");
    }
}