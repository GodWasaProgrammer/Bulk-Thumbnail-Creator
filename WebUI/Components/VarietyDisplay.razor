@using BulkThumbnailCreator.Services;
@using BulkThumbnailCreator.PictureClasses
@using BulkThumbnailCreator.Interfaces;
@using BulkThumbnailCreator;
@using BulkThumbnailCreator.Enums;

@using WebUI.Pages;
@inject CreatorService creatorService;
@inject ILogService logger;
@inject JobService JobService;
@inject AuthenticationStateProvider AuthProvider;

@* here we will show the image that has been selected *@
@if (VarietyUrls != null && CustomPicture == false)
{
    <MudGrid Justify="Justify.Center">
        <MudPaper Outlined="true" Elevation="3">
            <MudItem>
                <MudImage ObjectPosition="ObjectPosition.Center" style="width: 300px; height: 200px;" Fluid="true" Src="@picDataBoxURL"></MudImage>
            </MudItem>
        </MudPaper>
    </MudGrid>
    <MudGrid Justify="Justify.Center">
        <MudPaper Outlined="true" Elevation="3">

            @if (loading is false)
            {
                <MudItem>
                    <MudText Align="Align.Center" Color="Color.Tertiary">Make Varieties</MudText>
                    <MudButton OnClick="CreateFonts" Variant="Variant.Filled" Color="Color.Secondary">Fonts</MudButton>
                    <MudButton OnClick="CreateColors" Variant="Variant.Filled" Color="Color.Secondary">Colors</MudButton>
                    <MudButton OnClick="FXVariety" Variant="Variant.Filled" Color="Color.Secondary">F/X</MudButton>
                    <MudButton OnClick="BoxVariety" Variant="Variant.Filled" Color="Color.Secondary">Boxes</MudButton>
                    <MudButton OnClick="RandomVariety" Variant="Variant.Filled" Color="Color.Secondary">Randomize</MudButton>
                </MudItem>
            }

        </MudPaper>
    </MudGrid>
}
@if (loading is false)
{
    <div class="image-container">
        @if (VarietyUrls != null && CustomPicture == false)
        {
            @for (int ClickedImage = 0; ClickedImage < VarietyUrls.Count; ClickedImage++)
            {
                var index = ClickedImage;

                <div class="image-wrapper">
                    <MudImage Fluid="true" class="image-button" src="@VarietyUrls[index]" />
                    <div class="buttons">
                        <MudButton Class="button" OnClick="(() => NavToCustomizePicture(VarietyUrls[index]))" Color="Color.Primary" Variant="Variant.Filled">
                            Customize
                        </MudButton>
                        <MudButton Class="button" OnClick="(() => SelectPicture(VarietyUrls[index]))" Color="Color.Secondary" Variant="Variant.Filled">
                            Select
                        </MudButton>
                    </div>

                </div>

                @if ((ClickedImage + 1) % 3 == 0)
                {
                    <div style="flex-basis: 100%; height: 0;"></div>
                }
            }
        }

        @if (CustomPicture)
        {
            <CustomizePicture CurrentJob="CurrentJob" CurrentPagePictureData="passData" ImageURL="@passURL" />
        }
    </div>

}

@code
{
    public void Reset()
    {
        CurrentJob = null;
        passURL = null;
        passData = null;
        CustomPicture = false;
        VarietyUrls = null;
        InvokeAsync(() => StateHasChanged());
    }

    private void SelectPicture(string VarietyUrl)
    {
        var filename = Path.GetFileName(VarietyUrl);
        foreach (var variety in ParentPictureProp.Varieties)
        {
            var success = variety.OutPath.Contains(VarietyUrl);
            if (variety.OutPath.Contains(filename))
            {
                ParentPictureProp = variety;
                picDataBoxURL = ParentPictureProp.OutPath;
                CurrentJob.ClickedImage = picDataBoxURL;
                _VarietyUrls.Clear();
                break;
            }
        }
        StateHasChanged();
    }

    private async Task RandomVariety()
    {
        loading = true;
        ParentPictureProp = new(await creatorService.CreateRandomVariety(ParentPictureProp, CurrentJob));
        _VarietyUrls = CurrentJob.VarietyUrls;
        picDataBoxURL = ParentPictureProp.OutPath;
        loading = false;
        StateHasChanged();
    }

    private async Task BoxVariety()
    {
        loading = true;
        ParentPictureProp = new(await creatorService.CreateBoxVariety(ParentPictureProp, CurrentJob));
        _VarietyUrls = CurrentJob.VarietyUrls;
        picDataBoxURL = ParentPictureProp.OutPath;
        loading = false;
        StateHasChanged();
    }

    private async Task FXVariety()
    {
        loading = true;
        ParentPictureProp = new(await creatorService.CreateFXVariety(ParentPictureProp, CurrentJob));
        _VarietyUrls = CurrentJob.VarietyUrls;
        picDataBoxURL = ParentPictureProp.OutPath;
        loading = false;
        StateHasChanged();
    }

    private async Task CreateColors()
    {
        loading = true;
        ParentPictureProp = new(await creatorService.CreateColorVariety(ParentPictureProp, CurrentJob));
        _VarietyUrls = CurrentJob.VarietyUrls;
        picDataBoxURL = ParentPictureProp.OutPath;
        loading = false;
        StateHasChanged();
    }

    private async Task CreateFonts()
    {
        loading = true;
        ParentPictureProp = new(await creatorService.CreateFontVariety(ParentPictureProp, CurrentJob));
        _VarietyUrls = CurrentJob.VarietyUrls;
        picDataBoxURL = ParentPictureProp.OutPath;
        loading = false;
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    [Parameter]
    public string picDataBoxURL { get; set; }

    private bool loading = false;

    [Parameter]
    public Job CurrentJob { get; set; }

    [Parameter]
    public PictureData ParentPictureProp { get; set; }

    private string CurrentUser;

    // pass to customize Picture
    private PictureData passData;

    private List<string> _VarietyUrls = new();

    [Parameter]
    public List<string> VarietyUrls { get { return _VarietyUrls; } set { _VarietyUrls = value; } }

    // pass to customize Picture
    private string passURL;

    private bool CustomPicture = false;

    protected override async Task OnInitializedAsync()
    {
        var AuthState = await AuthProvider.GetAuthenticationStateAsync();

        CurrentUser = AuthState.User.Identity.Name;

        JobService.RegisterResetMethod(Reset);

        if (CurrentJob == null)
        {
            CurrentJob = await JobService.RequestCurrentJob(CurrentUser);
        }
        else
        {
            if (CurrentJob != null)
            {
                // if its not null we have to set the values for the respective child components to pass state
                // first we figure out which state, should be VarietyList or Custom

                // if it state of varietylist we will set the correlating varietylist.
                if (CurrentJob.State == States.varietyList)
                {
                    VarietyUrls = CurrentJob.VarietyUrls;
                    picDataBoxURL = CurrentJob.ClickedImage;
                    ParentPictureProp = await CreatorService.SetPictureDataImageDisplayCorrelation(picDataBoxURL, CurrentJob);
                    if(ParentPictureProp.OutPath is null)
                    {
                        ParentPictureProp = CreatorService.SetPictureDataImageDisplayCorrelationForVarietyList(picDataBoxURL, CurrentJob);
                    }
                    StateHasChanged();
                }
                if (CurrentJob.State == States.CustomPicture)
                {
                    // lifts the clicked image
                    passURL = CurrentJob.ClickedImage;

                    // creates an instance of a picdata to pass to child

                    PictureData passData = new();

                    // /// The service will be reset if we refreshed and is missing the correlating picturedata
                    // /// So we lift it from the job and off to the races

                    passData = CreatorService.SetPictureDataImageDisplayCorrelationForVarietyList(passURL, CurrentJob);
                    CustomPicture = true;
                    StateHasChanged();
                }
            }
        }
    }

    private void NavToCustomizePicture(string imageURL)
    {
        // set the correct state of the currentjob
        CurrentJob.State = States.CustomPicture;

        // passes which image we have clicked to preserve state on load
        CurrentJob.ClickedImage = imageURL;

        CustomPicture = true;
        passURL = imageURL;

        PictureData passData = CreatorService.SetPictureDataImageDisplayCorrelationForVarietyList(imageURL, CurrentJob);

        this.passData = passData;
    }

}

<style>
    .image-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px; /* Mellanrum mellan bilder */
    }

    .image-wrapper {
        position: relative;
        width: 320px; /* Fastställd bredd */
        height: 220px; /* Fastställd höjd */
        overflow: hidden; /* Ser till att inget sticker ut */
        box-sizing: border-box;
    }

        .image-wrapper img {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            width: 300px;
            height: 200px;
            max-width: 100%;
            max-height: 100%;
            margin: auto; /* Centrera bilden */
            object-fit: cover; /* Ser till att bilden täcker hela wrappern och behåller proportioner */
            display: block;
        }

    .buttons {
        position: absolute;
        bottom: 40px; /* 21px från botten */
        left: 0; /* För vänsterknappen */
        right: 0; /* För högerknappen */
        display: flex;
        justify-content: space-between; /* Placera knappar i vänster och höger hörn */
        padding: 0 10px; /* Lägg till padding så knapparna är inramade */
        z-index: 10; /* Gör så att knapparna ligger ovanpå bilden */
        visibility: hidden; /* Dölj knappar initialt, visa med opacity i hover */
        opacity: 0; /* Sätt opacity till 0 för att dölja knapparna */
        transition: opacity 0.3s ease; /* Gör övergången smidig */
    }

    .image-wrapper:hover .buttons {
        visibility: visible; /* Gör knapparna synliga när man hovrar över bilden */
        opacity: 1; /* Sätt opacity till 1 vid hovring */
    }

    .button {
        transition: background-color 0.3s ease; /* Smidig övergång vid hovring */
    }

        .button:hover {
            background-color: rgba(0, 0, 0, 0.8); /* Bakgrundsfärg vid hovring */
        }

</style>