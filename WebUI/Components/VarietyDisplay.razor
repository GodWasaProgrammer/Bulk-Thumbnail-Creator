@using BulkThumbnailCreator.Services;
@using BulkThumbnailCreator.PictureObjects;
@using BulkThumbnailCreator.Interfaces;
@using BulkThumbnailCreator;
@using BulkThumbnailCreator.Enums;

@using WebUI.Pages;
@inject PicDataService PicDataService;
@inject ILogService logger;
@inject JobService JobService;
@inject AuthenticationStateProvider AuthProvider;

<div class="image-container">
    @if (VarietyUrls != null && CustomPicture == false)
    {
        @for (int ClickedImage = 0; ClickedImage < VarietyUrls.Count; ClickedImage++)
        {
            var index = ClickedImage;

            <img class="image-button" src="@VarietyUrls[index]" @onclick="(() => NavToCustomizePicture(VarietyUrls[index]))" />
            @if ((ClickedImage + 1) % 3 == 0)
            {
                <div style="flex-basis: 100%; height: 0;"></div>
            }
        }
    }

    @if (CustomPicture)
    {
        <CustomizePicture CurrentJob="CurrentJob" CurrentPagePictureData="passData" ImageURL="@passURL" />
    }

    
</div>

@if (VarietyUrls != null && CustomPicture == false)
{
    <div style="justify-content:center">

        <MudButton Variant="Variant.Filled" Color="Color.Secondary" ButtonType="ButtonType.Reset" OnClick="JobService.ResetState">Restart</MudButton>
    </div>
}

@code
{
    public void Reset()
    {
        CurrentJob = JobService.Reset();
        passURL = null;
        passData = null;
        CustomPicture = false;
        VarietyUrls = null;
        InvokeAsync(() => StateHasChanged());
    }

    [Parameter]
    public Job CurrentJob { get; set; }

    [Parameter]
    public PictureData ParentPictureProp { get; set; }

    private string CurrentUser;

    // pass to customize Picture
    private PictureData passData;

    private List<string> _VarietyUrls = new();

    [Parameter]
    public List<string> VarietyUrls { get { return _VarietyUrls; } set { _VarietyUrls = value; } }

    // pass to customize Picture
    private string passURL;

    private bool CustomPicture = false;

    protected override async Task OnInitializedAsync()
    {
        var AuthState = await AuthProvider.GetAuthenticationStateAsync();

        CurrentUser = AuthState.User.Identity.Name;

        JobService.RegisterResetMethod(Reset);

        if (CurrentJob == null)
        {
            CurrentJob = await JobService.RequestCurrentJob(CurrentUser);
        }
        else
        {
            if (CurrentJob != null)
            {
                // if its not null we have to set the values for the respective child components to pass state
                // first we figure out which state, should be VarietyList or Custom

                // if it state of varietylist we will set the correlating varietylist.
                if (CurrentJob.State == States.varietyList)
                {
                    VarietyUrls = CurrentJob.VarietyUrls;
                    StateHasChanged();
                }
                if (CurrentJob.State == States.CustomPicture)
                {
                    // disable the varietylist from being shown since we have already clicked an image
                    // lifts the clicked image
                    passURL = CurrentJob.ClickedImage;

                    // creates an instance of a picdata to pass to child

                    PictureData passData = new();

                    /// The service will be reset if we refreshed and is missing the correlating picturedata
                    /// So we lift it from the job and off to the races
                    PicDataService.PicDataServiceList = CurrentJob.PictureDatas;

                    passData = PicDataService.SetPictureDataImageDisplayCorrelationForVarietyList(passURL);
                    CustomPicture = true;
                    StateHasChanged();
                }

            }
        }

    }

    private void NavToCustomizePicture(string imageURL)
    {
        // set the correct state of the currentjob
        CurrentJob.State = States.CustomPicture;

        // passes which image we have clicked to preserve state on load
        CurrentJob.ClickedImage = imageURL;

        CustomPicture = true;

        PictureData passData = new();

        passURL = imageURL;

        passData = PicDataService.SetPictureDataImageDisplayCorrelationForVarietyList(imageURL);

        this.passData = passData;
    }

}

<style>
    /* Style the image container */
    .image-container2 {
        display: flex;
        flex-wrap: wrap;
        height: 100%;
        justify-content: center;
    }

    image-container img {
        max-width: calc(50% - 50px); /* Set the width for each image in the row */
        margin: 10px;
    }
</style>

<style>
    .image-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

        .image-container img {
            max-width: calc(30% - 50px); /* Set the width for each image in the row */
            margin: 10px;
        }
</style>