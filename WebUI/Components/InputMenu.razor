@using Bulk_Thumbnail_Creator.Interfaces;
@using Bulk_Thumbnail_Creator;
@using Bulk_Thumbnail_Creator.Enums;
@using Bulk_Thumbnail_Creator.Services;
@using System.Text.RegularExpressions

@inject Bulk_Thumbnail_Creator.Services.PicDataService ds;
@inject ILogService logger;
@inject JobService JobService;

@if (DisableMenu == false)
{
    <MudContainer MaxWidth="MaxWidth.Small">
        <MudPaper>
            <MudText Color="Color.Secondary">Enter your text here, you should add multiple unique phrases/sentences</MudText>
            <MudText Color="Color.Secondary">However, you may change this later aswell.</MudText>
            <MudText Color="Color.Secondary">If you dont enter anything, some sample text will be printed.</MudText>
            <MudText Color="Color.Secondary">Duplicates will not be saved</MudText>

            <MudTextField Label="Enter Text here" Variant="Variant.Filled" @bind-Value="userText" />
            <MudButton OnClick="() => SaveText()" Variant="Variant.Filled" Color="Color.Primary">Save Text</MudButton>

        </MudPaper>
        <MudTextField Label="Youtube Link" Variant="Variant.Filled" @bind-Value="youtubeLink" />
        <MudButton OnClick="() => AwaitBTC()" Variant="Variant.Filled" Color="Color.Primary"> <MudText>Run BTC</MudText></MudButton>
        @if (!validURL && ButtonClicked)
        {
            <MudText Color="Color.Primary">Whoa buddy, you trying to trick me? You need to give me an actual YoutubeLink.</MudText>
            <MudImage Width="500" Height="500" Src="/Images/MemeTrickery.jpeg"></MudImage>
        }
    </MudContainer>



}

@code
{
    private string defaultText1 = "Good Ole Rambler try!";
    private string defaultText2 = "I've Taken Dunkirk! Onwards Men!";
    private string defaultText3 = "Tallyhoo Laddiooo";
    private string userText;
    private string youtubeLink;

    private bool DisableMenu;
    private bool validURL = false;
    bool ButtonClicked = false;

    List<string> userInputText = new();

    private void SaveText()
    {
        if (userText == null)
        {
            return;
        }
        else
        {
            if (userInputText.Contains(userText) == false)
            {
                userInputText.Add(userText);
            }

        }

    }
    /// <summary>
    /// Regex validation for youtube links
    /// </summary>
    /// <param name="url"></param>
    /// <returns></returns>
    bool ValidateYTLink(string url)
    {
        ButtonClicked = true;

        if (url == null)
        {
            return false;
        }

        // YouTube video URL pattern
        string pattern = @"^(https?://)?(www\.)?(youtube\.com/watch\?v=|youtu\.be/)([a-zA-Z0-9_-]{11})";

        // Create a Regex object
        Regex regex = new Regex(pattern);

        // Match the input URL against the pattern
        Match match = regex.Match(url);

        // Check if the match is successful
        return match.Success;
    }

    /// <summary>
    /// This is where we actually call the backend Bulk Thumbnail Creator
    /// </summary>
    /// <returns></returns>
    private async Task AwaitBTC()
    {
        // validate that our input is not something else than a youtube link
        validURL = ValidateYTLink(youtubeLink);

        /// disables our input options
        DisableMenu = true;

        // if it is not a valid youtube link, we return
        if (validURL == false)
        {
            DisableMenu = false;
            return;
        }
        /// if we have a valid YT link, we continue
        else
        {
            // creates a job
            job = await JobService.CreateJob(youtubeLink);

            List<string> defaultText = new() { defaultText1, defaultText2, defaultText3 };

            if (userInputText.Count != 0)
            {
                await ds.CreateInitialPictureArrayAsync(youtubeLink, userInputText);
            }
            else
            {
                await ds.CreateInitialPictureArrayAsync(youtubeLink, defaultText);
            }

            returnStateUpdate(DisableMenu);
        }
        await InvokeAsync(() => StateHasChanged());
    }

    [Parameter]
    public Action<bool> returnStateUpdate { get; set; }

    [Parameter]
    public Job job { get; set; }

    protected override void OnInitialized()
    {
        if (job != null)
        {
            if (job.State == States.Initial)
            {
                DisableMenu = false;
            }
            else
            {
                DisableMenu = true;
            }

        }

    }

}